<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>コアラボ (coalabo.)</title><link>https://coalabo.net/</link><description>Recent content on コアラボ (coalabo.)</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Fri, 03 Sep 2021 02:00:00 +2100</lastBuildDate><atom:link href="https://coalabo.net/index.xml" rel="self" type="application/rss+xml"/><item><title>【コロナ対策】部室の在室状況・体調記録アプリ</title><link>https://coalabo.net/p/i10jan/</link><pubDate>Fri, 03 Sep 2021 02:00:00 +2100</pubDate><guid>https://coalabo.net/p/i10jan/</guid><description>&lt;img src="https://coalabo.net/p/i10jan/cover.jpg" alt="Featured image of post 【コロナ対策】部室の在室状況・体調記録アプリ" />&lt;h2 id="昔々大学で対面授業が再開し始めた頃">昔々、大学で対面授業が再開し始めた頃&amp;hellip;&lt;/h2>
&lt;p>2020年夏頃、活動時の体温記録を条件に、岡山大学での部活動が再開されました。&lt;/p>
&lt;p>私は &lt;a class="link" href="https://oucrc.net/" target="_blank" rel="noopener"
>岡山大学電子計算機研究会&lt;/a> という部活の部長を務めているのですが、
活動の際には、全員の「体温・息苦しさなどの症状があるか・だるさや倦怠感を感じるか・入室時刻・退室時刻」を記録するよう指示がありました。&lt;/p>
&lt;p>最初の1週間は Google スプレッドシートを共有して、部室に来た部員に手入力してもらってたのですが、
特に &lt;code>帰る時にパソコン（スマホ）を開いて現在時刻を入力する&lt;/code> のがとても面倒&amp;hellip;&lt;/p>
&lt;p>どうにかできないかと考え、&lt;strong>課題を感じた時に技術で解決するのがエンジニアでしょ！&lt;/strong> ということで、部室に設置するアプリを制作することになりました。&lt;/p>
&lt;h2 id="その前に">その前に&lt;/h2>
&lt;p>この部活では、部員全員にニックネームがついています。
これは、先輩後輩関係なく気軽に呼び合い、技術の共有などコミュニケーションを円滑にするためです。&lt;/p>
&lt;p>そして、部屋の入り口にかけてある自分のネームプレートを、入室時には首にかけることになっています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="./p/i10jan/image_1.jpg" data-size="3563x1998">
&lt;img src="./p/i10jan/image_1.jpg"
width="3563"
height="1998"
srcset="./p/i10jan/image_1_hu1e3723281b15cfea67e91c589b53cecc_278234_480x0_resize_q75_box.jpg 480w, ./p/i10jan/image_1_hu1e3723281b15cfea67e91c589b53cecc_278234_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="私のネームプレート（紹介映像より抜粋）">
&lt;/a>
&lt;figcaption>私のネームプレート（紹介映像より抜粋）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>その後ろに、今回小さなQRコードをしのばせました！&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 429px"
>
&lt;a href="./p/i10jan/image_2.jpg" data-size="3566x1992">
&lt;img src="./p/i10jan/image_2.jpg"
width="3566"
height="1992"
srcset="./p/i10jan/image_2_hu9dccf6d05fb1e99e3c55ff2b62d08f1f_325451_480x0_resize_q75_box.jpg 480w, ./p/i10jan/image_2_hu9dccf6d05fb1e99e3c55ff2b62d08f1f_325451_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="QRコード（紹介映像より抜粋）">
&lt;/a>
&lt;figcaption>QRコード（紹介映像より抜粋）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>QRコードの中身のデータは、部内でユニークなuuidを発行しています。&lt;/p>
&lt;h2 id="作りたいもの">作りたいもの&lt;/h2>
&lt;p>入退室管理アプリをつくり、部室の入り口に設置します。
必要な機能は以下の通りです。&lt;/p>
&lt;ul>
&lt;li>入室時刻が記録できる&lt;/li>
&lt;li>入室時の体温を記録できる&lt;/li>
&lt;li>入室時の健康状況をチェックできる&lt;/li>
&lt;li>退室時刻が記録できる&lt;/li>
&lt;/ul>
&lt;p>そして、一番大事なことは、&lt;strong>できるだけ入力の手間を最小限にすること&lt;/strong> です。
何回もボタンをぽちぽちするようなUI・UXでは、そのうち面倒になって誰も入力してくれません!
できるだけ画面数を少なくし、アニメーションたっぷりで気持ち良いアプリに仕上げることで入力してくれる人が増えると考えました。&lt;/p>
&lt;h2 id="さぁ一番大好きなデザインui設計の時間です">さぁ一番大好きなデザイン（UI設計）の時間です！&lt;/h2>
&lt;p>&lt;del>ま、まぁもちろん一番好きなのはコーディングですよ&amp;hellip;？&lt;/del>&lt;/p>
&lt;p>どういうものを作ろうかと構想する、良いアイデアを思いついてアプリに組み込んでいく時間が、一番ワクワクして楽しいですよね。&lt;/p>
&lt;p>今回も Figma で、ある程度のデザインを仕上げました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="./p/i10jan/image_3.jpg" data-size="3584x2240">
&lt;img src="./p/i10jan/image_3.jpg"
width="3584"
height="2240"
srcset="./p/i10jan/image_3_hu66ba50fff54842033edf69ea384c6390_172166_480x0_resize_q75_box.jpg 480w, ./p/i10jan/image_3_hu66ba50fff54842033edf69ea384c6390_172166_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="デザインを制作しました！">
&lt;/a>
&lt;figcaption>デザインを制作しました！&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>左2枚のスクリーンが実際に使用した画面です。&lt;/p>
&lt;p>体調チェックについては、最初は一番右のデザインでしたが、入力者が「良好」・「不調」や「なし」・「あり」等のボタン内の文字を読む時間（コスト）がかかってしまい、また分かりにくいので、真ん中のデザインの直感的でわかりやすいチェックボックス式へと改良したりしています。&lt;/p>
&lt;h2 id="実際に制作していこう">実際に制作していこう！&lt;/h2>
&lt;p>今回使うのはこちら↓&lt;/p>
&lt;p>【 材料 】&lt;/p>
&lt;ul>
&lt;li>MacBook Pro: 一人前&lt;/li>
&lt;li>herokuサーバ（Heroku Postgres をトッピング）: 一台&lt;/li>
&lt;li>部内設置端末（Android）: お好みで&lt;/li>
&lt;/ul>
&lt;p>【 調味料 】&lt;/p>
&lt;ul>
&lt;li>Kotlin（フロント）&lt;/li>
&lt;li>Node.js + TypeScript + Express（バックエンド）&lt;/li>
&lt;li>Docker （herokuにしたので使わなくなった）&lt;/li>
&lt;/ul>
&lt;p>完成品は &lt;a class="link" href="#github-%e3%83%aa%e3%83%9d%e3%82%b8%e3%83%88%e3%83%aa" >こちら&lt;/a> に用意してあります！&lt;/p>
&lt;h2 id="工夫した点">工夫した点&lt;/h2>
&lt;p>今回、本番環境での安定した・長期的な保守ができるように意識して制作しました。
まぁコロナが終われば使うことは無くなるのですが、勉強も兼ねて結構丁寧に作成しました。（卒業時にコロナ禍が収束していなければ、後輩にソースコードを引き継ぐことになりますし&amp;hellip;）&lt;/p>
&lt;p>例えば、ルーティングをバージョンごとに &lt;code>app.ts&lt;/code> で切り分けて、バックエンドのAPIバージョンアップしても管理しやすいようにまとめていたり、PostgreSQLのデータベースも、きちんとマイグレーションファイルを作成して、DBの追加・修正を行いやすいようにしています。&lt;/p>
&lt;p>herokuを使うということで、今回初めてPostgreSQLを触ったのですが、Connection Pool でだいぶ苦労しました&amp;hellip;
接続を切るところをクエリ発行の直後にしないといけなく（ライブラリのせいかもしれないです？）、Connection が閉じられていないままになっており、謎のタイミングでサーバが落ちたりしていました。&lt;/p>
&lt;p>粘り強く原因を探して、なんとか解決しました&amp;hellip;（後日まとめようと思います）&lt;/p>
&lt;h2 id="最初の1週間はgasをバックエンドにしてました">最初の1週間はGASをバックエンドにしてました&lt;/h2>
&lt;p>最初はGoogle スプレッドシートと連携して、バックエンドのAPIにして、アプリでの入力データを格納していました。
しかし、GASのAPIはレスポンスに5秒くらいかかるんですよね&amp;hellip;&lt;/p>
&lt;p>最初に掲げた通り、ストレスなく入力できるアプリを目標としていたので、通信のくるくるが5秒続くようではストレスフリーとは言えません。そのため、heroku サーバをバックエンドにして作り直しました！&lt;/p>
&lt;h2 id="動作映像">動作映像&lt;/h2>
&lt;p>今回、このアプリケーションを大学に発表する場があり、友人が動作映像を編集してくれました。（一部抜粋）&lt;/p>
&lt;div class="video-wrapper">
&lt;video
controls
src="demo.mp4"
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="demo.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;h2 id="おまけ機能">おまけ機能&lt;/h2>
&lt;p>動画内でも紹介しているのですが、2つのおまけ機能がついています。&lt;/p>
&lt;ul>
&lt;li>Webサイトから部室内に人がいるか確認できる機能&lt;/li>
&lt;li>Slack の Bot から、部室に誰がいるか確認できる機能&lt;/li>
&lt;/ul>
&lt;p>1つ目の機能は、ejs でパパッとデータ取得 &amp;amp; 画像切り替えをしています。&lt;/p>
&lt;p>表示させている画像は、部員が書いてくれました！！
この部活には公式キャラクターなるものがいて、部屋に人がいる・いないバージョンの絵を描いてくれました。
名前は「ことちゃん」です、以後よろしくお願いします(笑)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 167;
flex-basis: 401px"
>
&lt;a href="./p/i10jan/image_4.jpg" data-size="3610x2160">
&lt;img src="./p/i10jan/image_4.jpg"
width="3610"
height="2160"
srcset="./p/i10jan/image_4_hu7048dd8b05c9613e4649769026d471c5_186060_480x0_resize_q75_box.jpg 480w, ./p/i10jan/image_4_hu7048dd8b05c9613e4649769026d471c5_186060_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="OPEN">
&lt;/a>
&lt;figcaption>OPEN&lt;/figcaption>
&lt;/figure>
&lt;figure
class="gallery-image"
style="
flex-grow: 139;
flex-basis: 334px"
>
&lt;a href="./p/i10jan/image_5.jpg" data-size="1438x1033">
&lt;img src="./p/i10jan/image_5.jpg"
width="1438"
height="1033"
srcset="./p/i10jan/image_5_hubf1d6d33fc26b0fdbb622cf20c184d22_54681_480x0_resize_q75_box.jpg 480w, ./p/i10jan/image_5_hubf1d6d33fc26b0fdbb622cf20c184d22_54681_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="CLOSE">
&lt;/a>
&lt;figcaption>CLOSE&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>2つ目の機能は、後輩が作ってくれました！&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 503;
flex-basis: 1207px"
>
&lt;a href="./p/i10jan/image_6.jpg" data-size="3582x712">
&lt;img src="./p/i10jan/image_6.jpg"
width="3582"
height="712"
srcset="./p/i10jan/image_6_hua24cd891f9d286554e91f1e95e447abb_49285_480x0_resize_q75_box.jpg 480w, ./p/i10jan/image_6_hua24cd891f9d286554e91f1e95e447abb_49285_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Slack Bot">
&lt;/a>
&lt;figcaption>Slack Bot&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ことちゃんが部室にいるメンバーを教えてくれます。かわいいですね！&lt;/p>
&lt;h2 id="github-リポジトリ">GitHub リポジトリ&lt;/h2>
&lt;p>拙いコードですが、もしこういったアプリを一時的に用意したい場合はぜひご活用ください。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/smpny7/i10jan-kotlin" target="_blank" rel="noopener"
>&lt;strong>smpny7/i10jan-kotlin&lt;/strong>&lt;/a>　https://github.com/smpny7/i10jan-kotlin&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/smpny7/i10jan-api" target="_blank" rel="noopener"
>&lt;strong>smpny7/i10jan-api&lt;/strong>&lt;/a>　https://github.com/smpny7/i10jan-api&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/smpny7/i10jan-gas" target="_blank" rel="noopener"
>&lt;strong>smpny7/i10jan-gas&lt;/strong>&lt;/a>　https://github.com/smpny7/i10jan-gas&lt;/p>
&lt;/blockquote></description></item><item><title>VIVACE（音ゲー）待望のアプリ化！</title><link>https://coalabo.net/p/vivace-asset-bundle/</link><pubDate>Thu, 19 Aug 2021 11:00:00 +2100</pubDate><guid>https://coalabo.net/p/vivace-asset-bundle/</guid><description>&lt;img src="https://coalabo.net/p/vivace-asset-bundle/cover.jpg" alt="Featured image of post VIVACE（音ゲー）待望のアプリ化！" />&lt;h2 id="これは１年前のお話">これは１年前のお話&amp;hellip;&lt;/h2>
&lt;p>学祭に向けて、昨年同級生と3人で&lt;a class="link" href="https://coalabo.net/p/vivace" target="_blank" rel="noopener"
>音ゲーを作った話&lt;/a>は過去に記事にしたと思います。&lt;/p>
&lt;p>当日の朝4時まで Discord をつないでコーディングをし、学祭ギリギリでビルドして、エラーがないことも確認できました。&lt;/p>
&lt;h2 id="discord-の通話を切った後悲劇は起こります">Discord の通話を切った後、悲劇は起こります&lt;/h2>
&lt;blockquote>
&lt;p>私: 「じゃぁもう4時半だし、PlayStore に APK ファイルをアップロードして、寝るか〜〜」&lt;/p>
&lt;p>カチッ&lt;/p>
&lt;p>カチッ&lt;/p>
&lt;p>（ドラッグの音）&lt;/p>
&lt;p>Google Play Store: 「&lt;strong>エラー:&lt;/strong> APK ファイルのサイズを 100 MB まで小さくするか、APK 拡張ファイルを使用する必要があります。」&lt;/p>
&lt;p>私: 「 ！！！！！！！！！」&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>そうです、この音ゲーアプリ、楽曲ファイルが原因で軽く100MBを超えちゃってるんです。&lt;/strong>&lt;/p>
&lt;p>さすがに眠くて、Google Play Store でのリリースは諦めました。（当日は APK 配布）&lt;/p>
&lt;h2 id="今回は追加ダウンロード機能を実装してアプリストアへのリリースまでやります">今回は追加ダウンロード機能を実装して、アプリストアへのリリースまでやります！&lt;/h2>
&lt;p>大体の音ゲーって、アプリサイズ縮小のために、起動後にコンテンツのダウンロードを行いますよね。&lt;/p>
&lt;p>今回はそれを、AssetBundle と用意している API サーバを用いて実装していきます。&lt;/p>
&lt;p>AssetBundle とは、アプリのビルド時に行っている処理を事前に行っておく事により、実行時に外部からアセットがロードできるようにしたものです。
これを Web サーバなどに置いておくことで、ダウンロードしてリソースを使用できるようになります。&lt;/p>
&lt;h2 id="assetbundle-の作成">AssetBundle の作成&lt;/h2>
&lt;p>今回は AssetBundleBrowser を使用します。これはプレリリース版ですので、使用は自己責任でお願いします。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/Unity-Technologies/AssetBundles-Browser" target="_blank" rel="noopener"
>&lt;strong>AssetBundleBrowser&lt;/strong> (GitHub)&lt;/a>　https://github.com/Unity-Technologies/AssetBundles-Browser&lt;/p>
&lt;/blockquote>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 439px"
>
&lt;a href="./p/vivace-asset-bundle/image_1.png" data-size="2638x1440">
&lt;img src="./p/vivace-asset-bundle/image_1.png"
width="2638"
height="1440"
srcset="./p/vivace-asset-bundle/image_1_hu9a727652be43fb9d28feb9963ee524d6_229015_480x0_resize_box_3.png 480w, ./p/vivace-asset-bundle/image_1_hu9a727652be43fb9d28feb9963ee524d6_229015_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="AssetBundleBrowser">
&lt;/a>
&lt;figcaption>AssetBundleBrowser&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>使い方は簡単、このツールに AssetBundle にまとめたいものをドラッグします。
今回だと、音源とプレビュー用の音源、各難易度の譜面とアートワークをセットし、
Build タブに移動します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 439px"
>
&lt;a href="./p/vivace-asset-bundle/image_2.png" data-size="2638x1440">
&lt;img src="./p/vivace-asset-bundle/image_2.png"
width="2638"
height="1440"
srcset="./p/vivace-asset-bundle/image_2_hudf69419b64c922032097dda0a3a20ea1_195309_480x0_resize_box_3.png 480w, ./p/vivace-asset-bundle/image_2_hudf69419b64c922032097dda0a3a20ea1_195309_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="AssetBundleBrowser (Build)">
&lt;/a>
&lt;figcaption>AssetBundleBrowser (Build)&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>AssetBundle は各プラットフォームごとに分かれています。
今回のリリースは、iOS と Android に絞ってますので、この2つを作成します。&lt;/p>
&lt;h2 id="配信するためのサーバを用意します">配信するためのサーバを用意します&lt;/h2>
&lt;p>本来は用意してあるバックエンドサーバから、AssetBundle を DL できるようにするといいのですが、
Google Cloud Platform を使用しているため、あまりディスク容量を増やしたくありません。&lt;/p>
&lt;p>ということで、Google Drive のいつもの作戦を使います！&lt;/p>
&lt;p>本来 Google Drive で共有リンクを生成すると、&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>https://drive.google.com/file/d/&lt;/strong> hogehoge &lt;strong>/view?usp=sharing&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>というリンクになるのですが、以下のようにリンクを変更すると、ファイルをダウンロードさせるヘッダーに変更できます。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>https://drive.google.com/uc?id=&lt;/strong> hogehoge &lt;strong>&amp;amp;usp=sharing&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>毎回リンクを手動で変更させるのは面倒なので、データベースには共有リンクで登録しておき、アプリ内でリンクを変換させるようにしておきます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="n">music&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">asset_bundle_ios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;https://drive.google.com/file/d/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;https://drive.google.com/uc?id=&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">Replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/view?usp=sharing&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;amp;usp=sharing&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>また、曲選択画面に表示される曲一覧は、DB と同期できるようにしてあります。
急遽任意の曲を非表示にするときや、楽曲を追加した時でもリアルタイム更新できるようになりました。
（セキュリティのため、通信には JWT での認証が必要です）&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 122;
flex-basis: 293px"
>
&lt;a href="./p/vivace-asset-bundle/image_3.jpg" data-size="2411x1972">
&lt;img src="./p/vivace-asset-bundle/image_3.jpg"
width="2411"
height="1972"
srcset="./p/vivace-asset-bundle/image_3_hu7048dd8b05c9613e4649769026d471c5_192482_480x0_resize_q75_box.jpg 480w, ./p/vivace-asset-bundle/image_3_hu7048dd8b05c9613e4649769026d471c5_192482_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="楽曲一覧を返すAPI（認証必要）">
&lt;/a>
&lt;figcaption>楽曲一覧を返すAPI（認証必要）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>アプリ内画面では、APIのデータを取得しこのように表示されます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="./p/vivace-asset-bundle/image_4.jpg" data-size="2208x1242">
&lt;img src="./p/vivace-asset-bundle/image_4.jpg"
width="2208"
height="1242"
srcset="./p/vivace-asset-bundle/image_4_hubacad2c2896eb07db59890425f392a23_275156_480x0_resize_q75_box.jpg 480w, ./p/vivace-asset-bundle/image_4_hubacad2c2896eb07db59890425f392a23_275156_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="VIVACE 曲選択画面">
&lt;/a>
&lt;figcaption>VIVACE 曲選択画面&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>運用・メンテナンスしていく上では、こういうリモートでの更新機能も大切ですね。&lt;/p>
&lt;h2 id="unity-内部のコード">Unity 内部のコード&lt;/h2>
&lt;p>調べてみると、&lt;code>UnityWebRequest&lt;/code> には AssetBundle をダウンロードする専用の &lt;code>UnityWebRequestAssetBundle&lt;/code> が用意されているようです。&lt;/p>
&lt;p>また、一度DLした楽曲はキャッシュしておきたいので、第2引数に CachedAssetBundle を入れて呼び出すことで、2回目以降の起動でダウンロードを省略できます。&lt;/p>
&lt;p>キャッシュされる条件ですが、CachedAssetBundle 以外にも &lt;code>version (uint)&lt;/code> や &lt;code>hash (Hash128)&lt;/code> を第2引数に入れてロードすることで、
同じくキャッシュが行われるそうです。（非推奨になりつつありますが、&lt;code>WWW.LoadFromCacheOrDownload&lt;/code> を使ってキャッシュする場合は version の型は int に変わるそうなので注意）&lt;/p>
&lt;p>ちなみに非推奨という点では、SendWebRequest の後のリクエスト処理も、&lt;code>request.isNetworkError&lt;/code> ではなく、
&lt;code>request.result&lt;/code>の値を、&lt;code>UnityWebRequest.Result.Success&lt;/code>・&lt;code>UnityWebRequest.Result.ConnectionError&lt;/code>・&lt;code>UnityWebRequest.Result.ProtocolError&lt;/code>&amp;hellip; といった用意されたクラスの enum の値で識別するのを推奨するようになりましたね。見やすくてとても気に入っています。（コード詳細↓）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="k">private&lt;/span> &lt;span class="n">IEnumerator&lt;/span> &lt;span class="n">DownloadAssetBundle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MusicList&lt;/span> &lt;span class="n">music&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">downloadUrl&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CachedAssetBundle&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">music&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">hash&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Hash128&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">music&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">music&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="nn">var&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">UnityWebRequestAssetBundle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAssetBundle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">downloadUrl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SendWebRequest&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">UnityWebRequest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Success&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="cm">/* 略 */&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">UnityWebRequest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ConnectionError&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">UnityWebRequest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ProtocolError&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">UnityWebRequest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DataProcessingError&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="cm">/* 略 */&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">UnityWebRequest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">InProgress&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArgumentOutOfRangeException&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>CachedAssetBundle を使用することで、URL から抽出されるファイル名と指定したバージョン番号を意識しなくて良くなり
（そもそも Google Drive のリンクなのでできないですが&amp;hellip;）、
保存場所の衝突など AssetBundle でよく発生する問題をハッシュ値で回避することができます。&lt;/p>
&lt;p>あとは対応するプラットフォーム毎にダウンロードURLを切り替え、
リソース使用部分を全て AssetBundle から読み込むように設定し直します。&lt;/p>
&lt;p>今回のプロジェクトの場合、バックエンドのスコア登録機能も、データベースの楽曲テーブルと同期させる必要がありました。&lt;/p>
&lt;h2 id="無事ストアリリースできました">無事ストアリリースできました！！&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="./p/vivace-asset-bundle/image_5.jpg" data-size="3840x2160">
&lt;img src="./p/vivace-asset-bundle/image_5.jpg"
width="3840"
height="2160"
srcset="./p/vivace-asset-bundle/image_5_hu3802cd9337a74f1b6be16cda9fad10dc_194315_480x0_resize_q75_box.jpg 480w, ./p/vivace-asset-bundle/image_5_hu3802cd9337a74f1b6be16cda9fad10dc_194315_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="AppStore">
&lt;/a>
&lt;figcaption>AppStore&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="./p/vivace-asset-bundle/image_6.jpg" data-size="3840x2160">
&lt;img src="./p/vivace-asset-bundle/image_6.jpg"
width="3840"
height="2160"
srcset="./p/vivace-asset-bundle/image_6_hu8c56193e12d65b6b77694aea2efe5883_345732_480x0_resize_q75_box.jpg 480w, ./p/vivace-asset-bundle/image_6_hu8c56193e12d65b6b77694aea2efe5883_345732_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="GooglePlayStore">
&lt;/a>
&lt;figcaption>GooglePlayStore&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ストアリリース後、1日で60人の方が遊んでくれて、&lt;del>正直GCPの料金が上がらないか心配&lt;/del> &lt;strong>とても嬉しい&lt;/strong> です。&lt;/p>
&lt;p>ということで、是非こちらから遊んでみてくださいね ♪&lt;/p>
&lt;p>今秋、楽曲追加も予定しています。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>AppStore:&lt;/strong>
&lt;a class="link" href="https://bit.ly/vivace-app-ios" target="_blank" rel="noopener"
>https://bit.ly/vivace-app-ios&lt;/a>&lt;/p>
&lt;p>&lt;strong>GooglePlayStore:&lt;/strong>
&lt;a class="link" href="https://bit.ly/vivace-app-android" target="_blank" rel="noopener"
>https://bit.ly/vivace-app-android&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>iPhoneXSのディスプレイを交換する</title><link>https://coalabo.net/p/iphone-display-replacement/</link><pubDate>Thu, 12 Aug 2021 00:00:00 +1900</pubDate><guid>https://coalabo.net/p/iphone-display-replacement/</guid><description>&lt;img src="https://coalabo.net/p/iphone-display-replacement/cover.jpg" alt="Featured image of post iPhoneXSのディスプレイを交換する" />&lt;h2 id="だってお風呂で音楽聴きたいもん">だってお風呂で音楽聴きたいもん&amp;hellip;&lt;/h2>
&lt;p>こちらの iPhoneXS、毎日お風呂で使ってたんですが水没しちゃいました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 56;
flex-basis: 135px"
>
&lt;a href="./p/iphone-display-replacement/image_1.gif" data-size="360x640">
&lt;img src="./p/iphone-display-replacement/image_1.gif"
width="360"
height="640"
srcset="./p/iphone-display-replacement/image_1_hu4f29866169058d1a0ebe58438449ebea_2806561_480x0_resize_box.gif 480w, ./p/iphone-display-replacement/image_1_hu4f29866169058d1a0ebe58438449ebea_2806561_1024x0_resize_box.gif 1024w"
loading="lazy"
alt="水没したiPhoneXS（クリックで再生）">
&lt;/a>
&lt;figcaption>水没したiPhoneXS（クリックで再生）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>iPhoneXS は 2018 年に発売され、IEC規格60529に基づくIP68等級に適合しているそうです。
どのくらいかというと、最大水深2メートルで最大30分間使用できるらしい。。&lt;/p>
&lt;p>毎日お風呂で壁に立てかけて音楽を聴いてたんですが（風呂に携帯持ち込むなと、友人にめちゃめちゃ怒られました）、突然ディスプレイがちらつき始めたのです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 75;
flex-basis: 180px"
>
&lt;a href="./p/iphone-display-replacement/image_2.jpg" data-size="336x448">
&lt;img src="./p/iphone-display-replacement/image_2.jpg"
width="336"
height="448"
srcset="./p/iphone-display-replacement/image_2_hucdb69b6e321b57a3ef555caeb56b992d_10294_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_2_hucdb69b6e321b57a3ef555caeb56b992d_10294_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="先ほどの映像から1時間後のiPhoneXS">
&lt;/a>
&lt;figcaption>先ほどの映像から1時間後のiPhoneXS&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="んまだ息はある">ん、まだ息はある&amp;hellip;？&lt;/h2>
&lt;p>とりあえず iPhone を完全に放置し、内部が乾燥したであろう2日後に、おそるおそる Mac に接続。&lt;/p>
&lt;p>すると、なんと反応があるではないですか！もしかして壊れていたのはディスプレイだけ&amp;hellip;？&lt;/p>
&lt;p>とりあえず急いでバックアップをとり、密林に行って交換用ディスプレイを購入することにしました。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>購入したもの&lt;/strong>　&lt;a class="link" href="https://www.amazon.co.jp/gp/product/B08RYRPJGK/ref=ppx_yo_dt_b_asin_title_o06_s01" target="_blank" rel="noopener"
>https://www.amazon.co.jp/gp/product/B08RYRPJGK/ref=ppx_yo_dt_b_asin_title_o06_s01&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="届きました修理開始です">届きました！修理開始です&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="./p/iphone-display-replacement/image_3.jpg" data-size="2048x1365">
&lt;img src="./p/iphone-display-replacement/image_3.jpg"
width="2048"
height="1365"
srcset="./p/iphone-display-replacement/image_3_hu8ac18cddfb6f4f669d47fe2b4dfef765_118142_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_3_hu8ac18cddfb6f4f669d47fe2b4dfef765_118142_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="有機ELディスプレイ">
&lt;/a>
&lt;figcaption>有機ELディスプレイ&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ディスプレイが届きました！めちゃめちゃ綺麗な箱に入って届いて、若干テンションが上がりました(笑)&lt;/p>
&lt;p>今回のキットにはドライバー3本とピンセット、ヘラ、吸盤、開口ツールなどの工具に加え、防水フレームステッカー（大切）とおまけのガラスフィルムもついてきました。
写真はは左から順に、星型ドライバー、十字型ドライバー、Y字型ドライバーです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 186;
flex-basis: 448px"
>
&lt;a href="./p/iphone-display-replacement/image_4.jpg" data-size="2048x1096">
&lt;img src="./p/iphone-display-replacement/image_4.jpg"
width="2048"
height="1096"
srcset="./p/iphone-display-replacement/image_4_hu8c4aec880049bbf3a93da3fcfc43c1e1_86155_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_4_hu8c4aec880049bbf3a93da3fcfc43c1e1_86155_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="今回のキットの付属品">
&lt;/a>
&lt;figcaption>今回のキットの付属品&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>まずはおしりのネジ2つを外していきます。YouTube で分解動画などがよくありますが、皆さん簡単そうに回していますが一番ここが難しかったです。
少しでも力を抜くと、すぐにネジがなめてしまうので注意しましょう。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 165;
flex-basis: 396px"
>
&lt;a href="./p/iphone-display-replacement/image_5.jpg" data-size="2048x1241">
&lt;img src="./p/iphone-display-replacement/image_5.jpg"
width="2048"
height="1241"
srcset="./p/iphone-display-replacement/image_5_hu000a15b2b1e631d18bbb09ceaff338ff_65188_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_5_hu000a15b2b1e631d18bbb09ceaff338ff_65188_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="こちらは星型ネジです">
&lt;/a>
&lt;figcaption>こちらは星型ネジです&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>あとは大体想像つくかと思いますが、ドライヤーでシールの粘着力を弱めていきます。
そして吸盤で引っ張り、隙間を作って開いていきます。&lt;/p>
&lt;p>お風呂で使っていたため、湿気などで防水フレームのシールが朽ちているかなと思っていましたが、予想通りでした。
ゴムが水分で、画像のように粉々になっていました。（あとで綺麗に除去しておきました。）
交換用の防水フレームシールが入っていてよかったです！&lt;/p>
&lt;p>本体正面から見て右側にケーブルがあるので、あまり深くヘラを差し込まないようにしましょう。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="./p/iphone-display-replacement/image_6.jpg" data-size="2048x1365">
&lt;img src="./p/iphone-display-replacement/image_6.jpg"
width="2048"
height="1365"
srcset="./p/iphone-display-replacement/image_6_huf332b9c6568a4baf831fd8c3f64dea26_123830_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_6_huf332b9c6568a4baf831fd8c3f64dea26_123830_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="どんどん隙間を作って開いていきます">
&lt;/a>
&lt;figcaption>どんどん隙間を作って開いていきます&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="ようやくご対面です一苦労">ようやくご対面です（一苦労）&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="./p/iphone-display-replacement/image_7.jpg" data-size="2048x1365">
&lt;img src="./p/iphone-display-replacement/image_7.jpg"
width="2048"
height="1365"
srcset="./p/iphone-display-replacement/image_7_hu5faf6190c4ae691b54f5c4509fcdc029_208358_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_7_hu5faf6190c4ae691b54f5c4509fcdc029_208358_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="iPhoneXSの中身">
&lt;/a>
&lt;figcaption>iPhoneXSの中身&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ここから、まずバッテリーに接続されているケーブルを外し、その後ディスプレイにつながるケーブル3本を外します。&lt;/p>
&lt;p>ケーブルが接続されているところにはカバーがついているのですが、ここをネジで外します。
驚いたのはネジの高さ（深さ？）で、1~2mm くらいしかありませんでした。
さすが Apple 製品、コンパクトな作りです。（紛失注意）&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="./p/iphone-display-replacement/image_8.jpg" data-size="2048x1365">
&lt;img src="./p/iphone-display-replacement/image_8.jpg"
width="2048"
height="1365"
srcset="./p/iphone-display-replacement/image_8_hua374c5b0ece84c3b3198fd0c5844630a_151383_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_8_hua374c5b0ece84c3b3198fd0c5844630a_151383_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="ケーブルカバー部">
&lt;/a>
&lt;figcaption>ケーブルカバー部&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>こちらがカバーを外した画像です。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="./p/iphone-display-replacement/image_9.jpg" data-size="2048x1365">
&lt;img src="./p/iphone-display-replacement/image_9.jpg"
width="2048"
height="1365"
srcset="./p/iphone-display-replacement/image_9_hude5357958f724463c9a63fc3244b9b5d_177156_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_9_hude5357958f724463c9a63fc3244b9b5d_177156_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="ケーブルカバーを外した様子">
&lt;/a>
&lt;figcaption>ケーブルカバーを外した様子&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>まずはバッテリーの接続をはずし、通電するといけないので端子をセロハンテープ等で巻いておきます。&lt;/p>
&lt;p>そして、てこの原理をつかってディスプレイのケーブルコネクタを解除します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="./p/iphone-display-replacement/image_10.jpg" data-size="2048x1365">
&lt;img src="./p/iphone-display-replacement/image_10.jpg"
width="2048"
height="1365"
srcset="./p/iphone-display-replacement/image_10_hu10c35a3d23ad7657f911dd3cd71fc592_214539_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_10_hu10c35a3d23ad7657f911dd3cd71fc592_214539_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="端子を外しました！">
&lt;/a>
&lt;figcaption>端子を外しました！&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>これで iPhone の 2枚おろしの完成です！&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="./p/iphone-display-replacement/image_11.jpg" data-size="2048x1365">
&lt;img src="./p/iphone-display-replacement/image_11.jpg"
width="2048"
height="1365"
srcset="./p/iphone-display-replacement/image_11_hu899ad977db9ea6c13e4ef0e6ddc240ba_163976_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_11_hu899ad977db9ea6c13e4ef0e6ddc240ba_163976_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="さばかれたiPhone">
&lt;/a>
&lt;figcaption>さばかれたiPhone&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="新しいディスプレイに-faceid-部分を移植します">新しいディスプレイに FaceID 部分を移植します&lt;/h2>
&lt;p>ここが一番緊張しました。&lt;/p>
&lt;p>上部のカメラ部分を新しいディスプレイに移すのですが、あまりネジで強く締めすぎるとディスプレイが割れてしまうので、慎重に作業を行います。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="./p/iphone-display-replacement/image_12.jpg" data-size="2048x1365">
&lt;img src="./p/iphone-display-replacement/image_12.jpg"
width="2048"
height="1365"
srcset="./p/iphone-display-replacement/image_12_hu76a75acc5b810d162b46029ef2a4a4f2_137824_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_12_hu76a75acc5b810d162b46029ef2a4a4f2_137824_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="新旧ディスプレイ、右が新品です">
&lt;/a>
&lt;figcaption>新旧ディスプレイ、右が新品です&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="あとは逆の手順でもとに戻していきます">あとは逆の手順でもとに戻していきます&lt;/h2>
&lt;p>組み立ては端子を挿すだけでいいので、簡単でした。&lt;/p>
&lt;p>蓋を閉じる前に、動作確認をしておきます！&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="./p/iphone-display-replacement/image_13.jpg" data-size="2048x1365">
&lt;img src="./p/iphone-display-replacement/image_13.jpg"
width="2048"
height="1365"
srcset="./p/iphone-display-replacement/image_13_hu0bc71ae7266c1b718b059ce0ee2d6380_177215_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_13_hu0bc71ae7266c1b718b059ce0ee2d6380_177215_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="復元完了！電源は入るのか&amp;hellip;？">
&lt;/a>
&lt;figcaption>復元完了！電源は入るのか…？&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="ついた">ついた&lt;/h2>
&lt;p>無事電源が入りました！！！&lt;/p>
&lt;p>もう一度電源を切って、蓋を閉めておきます。
耐水性がなくなってしまうので、付属したフレームステッカーを貼るのを忘れないようにしましょう。&lt;/p>
&lt;p>閉めるときに、おしりのネジを片方なめてしまったことは内緒です。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="./p/iphone-display-replacement/image_14.jpg" data-size="2048x1365">
&lt;img src="./p/iphone-display-replacement/image_14.jpg"
width="2048"
height="1365"
srcset="./p/iphone-display-replacement/image_14_hu02f42124eea6318abb67305274ac819b_95787_480x0_resize_q75_box.jpg 480w, ./p/iphone-display-replacement/image_14_hu02f42124eea6318abb67305274ac819b_95787_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Hello">
&lt;/a>
&lt;figcaption>Hello&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="交換ディスプレイのレビュー">交換ディスプレイのレビュー&lt;/h2>
&lt;p>今回購入したディスプレイのレビュー欄には、3D Touch の感度が悪いとありました。&lt;/p>
&lt;p>私が試した感じだと、やはり 3D Touch は押し込んでも反応しないことが8割くらいあります。&lt;/p>
&lt;p>現在2ヶ月くらい利用していますが、ディスプレイ自体はきちんと使用できています。ただ、気づいた点もいくつかあるのでまとめておきます。&lt;/p>
&lt;ul>
&lt;li>正規品じゃないので、True Tone 機能が使えなかった。&lt;/li>
&lt;li>3D Touch は 1秒くらい長押ししてから押し込むと反応する。&lt;/li>
&lt;li>ディスプレイの下部のカーブが正規品と異なる。（角の表示範囲が若干異なる）&lt;/li>
&lt;/ul>
&lt;p>ただ、この iPhone XS のゴールドの色や形は気に入っているので、これからも修理しながら大切に使っていこうと思います！&lt;/p>
&lt;p>&lt;em>&lt;strong>追伸：お風呂用の防水 Bluetooth スピーカーを購入しました。&lt;/strong>&lt;/em>&lt;/p></description></item><item><title>学祭2020向け音ゲーの制作: VIVACE</title><link>https://coalabo.net/p/vivace/</link><pubDate>Mon, 12 Jul 2021 02:00:00 +2100</pubDate><guid>https://coalabo.net/p/vivace/</guid><description>&lt;img src="https://coalabo.net/p/vivace/cover.jpg" alt="Featured image of post 学祭2020向け音ゲーの制作: VIVACE" />&lt;h2 id="学祭で何か展示したい">学祭で何か展示したい！&lt;/h2>
&lt;p>その当時、新しいジャンルのものに挑戦したい！とずっと考えており、Unity に挑戦することにしました。&lt;/p>
&lt;p>同級生のエンジニア 3名で作ったのですが、制作物は 3人とも大好きな「音ゲー」にしました。&lt;/p>
&lt;p>こんな感じの音ゲーを制作しました（ネタバレ）↓&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="./p/vivace/image_1.jpg" data-size="1920x1080">
&lt;img src="./p/vivace/image_1.jpg"
width="1920"
height="1080"
srcset="./p/vivace/image_1_hu9a8e108379b3f54dd8a3b896da5d54b6_221912_480x0_resize_q75_box.jpg 480w, ./p/vivace/image_1_hu9a8e108379b3f54dd8a3b896da5d54b6_221912_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="スプラッシュ画面">
&lt;/a>
&lt;figcaption>スプラッシュ画面&lt;/figcaption>
&lt;/figure>
&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="./p/vivace/image_2.jpg" data-size="1610x906">
&lt;img src="./p/vivace/image_2.jpg"
width="1610"
height="906"
srcset="./p/vivace/image_2_hu4cd3db7fb58ff83aaea5039d16da9a20_227693_480x0_resize_q75_box.jpg 480w, ./p/vivace/image_2_hu4cd3db7fb58ff83aaea5039d16da9a20_227693_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="プレイ画面">
&lt;/a>
&lt;figcaption>プレイ画面&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="タイトル決定">タイトル決定&lt;/h2>
&lt;p>まず初めに考えたのは、仕様でもデザインでもなくタイトルでした。&lt;/p>
&lt;p>タイトルは、「VIVACE」（ヴィヴァーチェ）です！
速度記号で、「活発に」という意味があるそうです。&lt;/p>
&lt;h2 id="デザイン作成">デザイン作成！&lt;/h2>
&lt;p>デザインを作成するのが一番好きかもしれません（おい）&lt;/p>
&lt;p>最近はデザインを作成するだけで満足感を得ることができるようになりました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 207;
flex-basis: 498px"
>
&lt;a href="./p/vivace/image_3.jpg" data-size="2482x1196">
&lt;img src="./p/vivace/image_3.jpg"
width="2482"
height="1196"
srcset="./p/vivace/image_3_hu5a3d569f3e86769650b80e6e0cb903bf_239954_480x0_resize_q75_box.jpg 480w, ./p/vivace/image_3_hu5a3d569f3e86769650b80e6e0cb903bf_239954_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="デザイン作成">
&lt;/a>
&lt;figcaption>デザイン作成&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="とりあえず最低限遊べるコードを実装します">とりあえず、最低限遊べるコードを実装します&lt;/h2>
&lt;p>本来であればタッチで遊べる仕様ですが、とりあえずキーボードでノーツを叩けるようにします。&lt;/p>
&lt;p>中央から順に、&lt;code>Perfect&lt;/code>・&lt;code>Great&lt;/code>・&lt;code>Good&lt;/code> の3つの &lt;code>Box Collider&lt;/code> を設置し、
ノーツ落下時の &lt;code>onTriggerEnter&lt;/code> と &lt;code>onTriggerExit&lt;/code> の2つで判定を検知します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 158;
flex-basis: 380px"
>
&lt;a href="./p/vivace/image_4.jpg" data-size="541x341">
&lt;img src="./p/vivace/image_4.jpg"
width="541"
height="341"
srcset="./p/vivace/image_4_hu4f001d61d1a587084869942b6a54a3f4_14778_480x0_resize_q75_box.jpg 480w, ./p/vivace/image_4_hu4f001d61d1a587084869942b6a54a3f4_14778_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="イメージ画像">
&lt;/a>
&lt;figcaption>イメージ画像&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 216;
flex-basis: 518px"
>
&lt;a href="./p/vivace/image_5.jpg" data-size="1898x878">
&lt;img src="./p/vivace/image_5.jpg"
width="1898"
height="878"
srcset="./p/vivace/image_5_huf006652439d18c46964515f450384cef_68695_480x0_resize_q75_box.jpg 480w, ./p/vivace/image_5_huf006652439d18c46964515f450384cef_68695_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Rider画面">
&lt;/a>
&lt;figcaption>Rider画面&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>スコアに関しては、共同開発したメンバーが区分求積法での加算を実装してくれました（天才）&lt;/p>
&lt;p>ん&amp;hellip; 区分求積法ってなんだっけ？&lt;/p>
&lt;p>これです！高校数学で習いましたね！（私は gg った）&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 172;
flex-basis: 413px"
>
&lt;a href="./p/vivace/image_6.jpg" data-size="541x314">
&lt;img src="./p/vivace/image_6.jpg"
width="541"
height="314"
srcset="./p/vivace/image_6_hu80c159b536215a2a3a7986786ea41fba_6961_480x0_resize_q75_box.jpg 480w, ./p/vivace/image_6_hu80c159b536215a2a3a7986786ea41fba_6961_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="区分求積法">
&lt;/a>
&lt;figcaption>区分求積法&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="ノーツの読み込み仕様を決定">ノーツの読み込み仕様を決定&lt;/h2>
&lt;p>とりあえず、CSV形式（カンマ区切り）で譜面を制作することにしました！&lt;/p>
&lt;p>こんな感じ ↓&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">1.6901408450704225,1
1.6901408450704225,3
2.007042253521127,2
2.323943661971831,3
2.535211267605634,2
2.535211267605634,4
2.9577464788732395,2
2.9577464788732395,4
3.591549295774648,3
3.8028169014084505,2
4.014084507042254,1
4.225352112676056,0
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ノーツタッチの時刻と、それに対応するレーン（0〜4）番号を保存しています。&lt;/p>
&lt;p>また、これを生成するツールも Python で実装しました！&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 144;
flex-basis: 346px"
>
&lt;a href="./p/vivace/image_7.png" data-size="1394x966">
&lt;img src="./p/vivace/image_7.png"
width="1394"
height="966"
srcset="./p/vivace/image_7_huf5bf0cb86f39d7079dacdecf48ca5fcf_451000_480x0_resize_box_3.png 480w, ./p/vivace/image_7_huf5bf0cb86f39d7079dacdecf48ca5fcf_451000_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Notes Maker">
&lt;/a>
&lt;figcaption>Notes Maker&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>詳しくはこちら ↓&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/smpny7/notes-maker" target="_blank" rel="noopener"
>&lt;strong>notes-maker（GitHub）&lt;/strong>&lt;/a> &lt;a class="link" href="https://github.com/smpny7/notes-maker" target="_blank" rel="noopener"
>https://github.com/smpny7/notes-maker&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="さて次は楽しい楽しいバックエンド">さて、次は楽しい楽しいバックエンド&lt;/h2>
&lt;p>VIVACE には、「ランキングボード」という機能があり、各曲上位スコア10名の名前とスコアがクリア時に掲載されます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="./p/vivace/image_8.jpg" data-size="1920x1080">
&lt;img src="./p/vivace/image_8.jpg"
width="1920"
height="1080"
srcset="./p/vivace/image_8_hu12f811843f9fbda2c33f11a63863c5fd_176894_480x0_resize_q75_box.jpg 480w, ./p/vivace/image_8_hu12f811843f9fbda2c33f11a63863c5fd_176894_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="クリア画面（サンプル）">
&lt;/a>
&lt;figcaption>クリア画面（サンプル）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>鬼譜面ばかりなので、スコアが80万点にすら乗らない曲ばかりですが&amp;hellip;（もはや人間業ではありません）&lt;/p>
&lt;p>まぁ1~10位が全部100万点とかにならないので、いい感じにランキングボードが機能しているなという感じです。&lt;/p>
&lt;p>少し脱線しましたが、プレイヤーのクリア履歴は全部サーバーのDBに保管されており、
ユーザーの認証やデータの別端末への引き継ぎ、スコアの格納などはバックエンドのAPIで行っています。&lt;/p>
&lt;p>とりあえず、何で作ろう&amp;hellip;？&lt;/p>
&lt;p>と熟考し、最終的に私の大好きな Express で作ることにしました。
具体的には&lt;code>Node.js&lt;/code> + &lt;code>Typescript&lt;/code> + &lt;code>Express&lt;/code> で作成しています。&lt;/p>
&lt;p>サーバーは GCP の無料枠で、Docker 環境で今もなお動かしています。&lt;/p>
&lt;p>詳しくはこちら ↓&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/smpny7/vivace-api" target="_blank" rel="noopener"
>&lt;strong>vivace-api（GitHub）&lt;/strong>&lt;/a> &lt;a class="link" href="https://github.com/smpny7/vivace-api" target="_blank" rel="noopener"
>https://github.com/smpny7/vivace-api&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="共同作業の始まりだ">共同作業の始まりだ！&lt;/h2>
&lt;p>ここからプロジェクトを GitHub Organizations のリポジトリに移植し、
共同開発がしやすいようにセットアップしました。（&lt;a class="link" href="https://github.com/vivace-app" target="_blank" rel="noopener"
>こちら&lt;/a>）&lt;/p>
&lt;p>コーディングは基本メンバーの3人で行い、譜面の作成は、基本他の部員に手伝ってもらいました。（結果 → 鬼譜面）&lt;/p>
&lt;p>あまりもう覚えてないですが、曲選択機能やノーツ落下速度・タイミング調整機能、
プレイ時のエフェクトやサウンドなどを2ヶ月くらいかけて極めていきました。&lt;/p>
&lt;p>学祭当日の朝4:00まで、みんなで徹夜でバグ修正していたのは秘密です（楽しかった）&lt;/p>
&lt;h2 id="学祭終了後">学祭終了後&lt;/h2>
&lt;p>3人で話し合い、このソースコードは、バックエンド・譜面生成ツールも含めオープンソース化しようということになりました。&lt;/p>
&lt;p>海外の人がフォークしてくれてたのには少し驚きましたが、自分達でも楽曲DL機能・GooglePlayログイン機能など、
少しずつですが、さまざまなアップデートを加えていってます。&lt;/p>
&lt;p>鬼譜面ですが、史上最強の音ゲーだと思います！&lt;/p>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>この音ゲーを制作した経緯として、もう1つの理由があります。&lt;/p>
&lt;p>サークルの後輩たち（DTM してる人が多いです。）が、コミケに向けて曲をたくさん作っていました。
しかし、コロナ化の影響で中止となり、アウトプットする場がなくなってしまったこともあり、
同級生3人でその曲を使った音ゲーを作り、1つの製作物にしようということになりました。&lt;/p>
&lt;p>エンジニアの3人以外にも、楽曲製作班、譜面製作班など、コロナ禍の学祭で、
ここまで団結してオンラインで出し物を準備することができるとは思わなかったので、
忘れられない貴重な体験になりました。&lt;/p>
&lt;p>制作に協力していただいた皆様、本当にありがとうございました。&lt;/p></description></item><item><title>誰にとってもわかりやすいコミットメッセージ</title><link>https://coalabo.net/p/commit-message/</link><pubDate>Sat, 05 Jun 2021 22:00:00 +2100</pubDate><guid>https://coalabo.net/p/commit-message/</guid><description>&lt;img src="https://coalabo.net/p/commit-message/cover.jpg" alt="Featured image of post 誰にとってもわかりやすいコミットメッセージ" />&lt;h2 id="みんなコミットメッセージってどんなふうに書いてるのかな">みんなコミットメッセージってどんなふうに書いてるのかな？&lt;/h2>
&lt;p>ふと気になって、さまざまなオープンソースのコミットメッセージをみてきました。&lt;/p>
&lt;p>今まで自分が使ってきたコミットメッセージがあまりにも一般的じゃなかったので、ここで統一したいと思います！（覚え書き）&lt;/p>
&lt;h2 id="これまでのコミットメッセージの付け方">これまでのコミットメッセージの付け方&lt;/h2>
&lt;p>はじめて共同プロジェクトを立ち上げた時に、とあるネット上の人のコミットメッセージの書き方を真似て、マイルールとしていました。&lt;/p>
&lt;p>大かっこ[]の中に Prefix を入れ（例：&lt;code>add&lt;/code> &lt;code>fix&lt;/code> &lt;code>hotfix&lt;/code> など）、その後に日本語でコミットメッセージを記入するという形でしたが、
あまりこの書き方をしている人が多くなかったのです&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[&lt;/span>add&lt;span class="o">]&lt;/span> リアルタイムデータベースとの通信機能
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="もっとも多かった印象がある--かっこよかったもの">もっとも多かった印象がある &amp;amp; かっこよかったもの&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">Add: リアルタイムデータベースとの通信機能
&lt;/code>&lt;/pre>&lt;/div>&lt;p>やっぱこういう Prefix のつけ方がかっこいいですよね。&lt;/p>
&lt;p>あと当たり前ですが、英語でのコミットメッセージが多かったので、個人開発は英語、友人との共同開発は日本語という感じに分けてもいいですね。&lt;/p>
&lt;h2 id="prefix-で代表的なもの">Prefix で代表的なもの&lt;/h2>
&lt;p>&lt;code>add&lt;/code>・&lt;code>update&lt;/code>・&lt;code>upgrade&lt;/code>・&lt;code>fix&lt;/code>・&lt;code>hotfix&lt;/code> などはよく聞きますが、どういった Prefix が共通認識としてよく使われているのでしょうか。&lt;/p>
&lt;p>また、&lt;code>update&lt;/code> と &lt;code>upgrade&lt;/code> など、違いがよくわからないものも多いので、使う場合のシチュエーションも同時に調べてみたいと思います。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Prefix&lt;/th>
&lt;th style="text-align:left">使うシチュエーション&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Add:&lt;/td>
&lt;td style="text-align:left">機能やファイルなどの追加&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Improve:&lt;/td>
&lt;td style="text-align:left">コードの改善・リファクタリング&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Change:&lt;/td>
&lt;td style="text-align:left">仕様変更&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Update:&lt;/td>
&lt;td style="text-align:left">機能修正（バグではない）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Upgrade:&lt;/td>
&lt;td style="text-align:left">バージョンアップ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Disable:&lt;/td>
&lt;td style="text-align:left">機能の無効化（コメントアウト等）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Rename:&lt;/td>
&lt;td style="text-align:left">ファイル名を変更する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Remove:&lt;/td>
&lt;td style="text-align:left">ファイルを削除する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Move:&lt;/td>
&lt;td style="text-align:left">ファイルを移動する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Fix:&lt;/td>
&lt;td style="text-align:left">バグ修正&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Hotfix:&lt;/td>
&lt;td style="text-align:left">クリティカルなバグ修正&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Revert:&lt;/td>
&lt;td style="text-align:left">変更取り消し&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>調べてみた結果、&lt;code>update&lt;/code> と &lt;code>upgrade&lt;/code> は上記のように分けている人もいれば、&lt;code>update&lt;/code>　がバージョンアップとしている人もいました。
また、&lt;code>improve&lt;/code> の代わりに &lt;code>clean&lt;/code> を使う人も多かったですが、こちらはシチュエーションは同じなので問題にはならなそうです。
&lt;code>change&lt;/code> と &lt;code>update&lt;/code> もほぼ同じ印象を受けました。&lt;/p>
&lt;p>上の表の中では、&lt;code>update&lt;/code> は二重の捉え方があるので、使うときは気にかけておく方がよさそうですね。。&lt;/p>
&lt;h2 id="では自分なりの-prefix-表を作ってみよう">では、自分なりの Prefix 表を作ってみよう&lt;/h2>
&lt;p>上記でさまざまな Prefix を洗い出してみて、その問題点を踏まえた上で、誰にとってもわかりやすい Prefix を自分で決めておきたいと思います。&lt;/p>
&lt;p>また、&lt;code>Rename&lt;/code> や &lt;code>Move&lt;/code> などはあまりよく使った記憶がないので、今回表からは外しておきます。
（スタートアップなどの経験が多く、長期的なメンテナンス経験をあまりしてこなかったのも原因かも&amp;hellip;）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Prefix&lt;/th>
&lt;th style="text-align:left">使うシチュエーション&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Add:&lt;/td>
&lt;td style="text-align:left">機能やファイルなどの追加&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Clean:&lt;/td>
&lt;td style="text-align:left">コードの改善・リファクタリング&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Change:&lt;/td>
&lt;td style="text-align:left">仕様変更&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Upgrade:&lt;/td>
&lt;td style="text-align:left">バージョンアップ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Disable:&lt;/td>
&lt;td style="text-align:left">機能の無効化（コメントアウト等）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Fix:&lt;/td>
&lt;td style="text-align:left">バグ修正&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Hotfix:&lt;/td>
&lt;td style="text-align:left">クリティカルなバグ修正&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>曖昧な &lt;code>update&lt;/code> という Prefix は今回避け、&lt;code>improve&lt;/code> も若干 &lt;code>update&lt;/code> と被る気がしたので、
完全にリファクタリング（仕様はそのままでコードをすっきりさせる）という意味がはっきりと伝わるように &lt;code>clean&lt;/code> に変更しました。&lt;/p>
&lt;p>この最小編成でとりあえずは立ち回ろうと思います！&lt;/p>
&lt;h2 id="コミットメッセージって1行しか対応していないと思ってました">コミットメッセージって1行しか対応していないと思ってました&lt;/h2>
&lt;p>コミットメッセージって、みなさん複数行で書くんですね。
コミットメッセージ内に Enter って入れられないものだと思ってました(笑)&lt;/p>
&lt;p>コミットメッセージは、&lt;code>Subject&lt;/code> ・ &lt;code>Body&lt;/code> ・ &lt;code>Footer&lt;/code> という形で書くらしいです。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:left">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Subject&lt;/td>
&lt;td style="text-align:left">そのコミットで何をしたのかをまとめた短い文章&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Body&lt;/td>
&lt;td style="text-align:left">追加や修正が必要だった理由など&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Footer&lt;/td>
&lt;td style="text-align:left">Issue の ID やタイトル&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>1行目に &lt;code>Subject&lt;/code>、2行目に空行で、3行目に内容を書きます。
1行目の &lt;code>Subject&lt;/code> に書く内容は72文字以上は省略されるので、72文字以内が良さそうです。&lt;/p>
&lt;p>イメージとしては以下の書き方です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-txt" data-lang="txt">Add: リアルタイムデータベースとの通信機能
Firebase を使ってランキングを保存できるようにしました。
...（略）...
#103 Issue のタイトル
&lt;/code>&lt;/pre>&lt;/div>&lt;p>また、&lt;code>Body&lt;/code> と &lt;code>Footer&lt;/code> は分けず、以下のようにしているものもありました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-txt" data-lang="txt">Add: リアルタイムデータベースとの通信機能
refs #103 Firebase を使ってランキングを保存できるようにしました。
...（略）...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ですが、個人で開発するプロジェクトに関しては、ここまでしなくても内容はわかるかなとも思います。&lt;/p>
&lt;h2 id="それぞれの案件に応じて臨機応変に対応する">それぞれの案件に応じて臨機応変に対応する&lt;/h2>
&lt;p>どれだけの人数でプロジェクトを進めていくのか、どのくらい長期的にメンテナンスしていくのかによって、
コミットメッセージのクオリティを変えていくのがベストプラクティスかなと思います。&lt;/p></description></item><item><title>鯖管向け！Minecraftサーバーの監視ツールの制作</title><link>https://coalabo.net/p/minecraft-server-monitor/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +2100</pubDate><guid>https://coalabo.net/p/minecraft-server-monitor/</guid><description>&lt;img src="https://coalabo.net/p/minecraft-server-monitor/cover.jpg" alt="Featured image of post 鯖管向け！Minecraftサーバーの監視ツールの制作" />&lt;h2 id="今回の-firebase-は一味違います">今回の Firebase は一味違います&lt;/h2>
&lt;p>今回作成する監視サーバですが、Google Cloud Platform の Cloud Scheduler を使って、Firebase の Cloud Functions を定期実行させます。&lt;/p>
&lt;p>Cloud Scheduler と Cloud Functions の連携方法ですが、
Google が用意してある &lt;code>firebase-functions&lt;/code> というライブラリに付随しているスケジュール機能を使用することで、
自動で GCP の Cloud Scheduler に登録されます。&lt;/p>
&lt;h2 id="天下のgoogle様様">天下のGoogle様様&lt;/h2>
&lt;p>Firebase で定期実行って、かなり金銭的なコストがかかりそうですよね。&lt;/p>
&lt;p>Web サーバーなどとは違い、時間指定のあるジョブ（ Worker ）になるので、
結構ホスティングサービスも少ないですし、今回作成する監視サーバーは10分毎に定期実行します。&lt;/p>
&lt;p>&lt;strong>ですが、Cloud Functions では月200万回までの呼び出しは無料です！！&lt;/strong>&lt;/p>
&lt;p>具体的に、関数の呼び出しの課金は以下の通りです。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">月間呼び出し回数&lt;/th>
&lt;th style="text-align:center">料金（100 万回あたり）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">最初の 200 万回&lt;/td>
&lt;td style="text-align:center">無料&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">200 万回を超えた分&lt;/td>
&lt;td style="text-align:center">$0.40&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>今回は、かなり複雑なDBの整形ジョブやWebサービスのCRONジョブをするわけではないので、無料枠で十分です。&lt;/p>
&lt;p>&lt;strong>ただし気をつけないといけないのが、関数のデプロイには料金がかかります。&lt;/strong>&lt;/p>
&lt;p>まず、関数は無料枠のない Container Registry に保存されるため、デプロイ後にわずかな料金が発生します。
Container Registry のストレージ費用は、1 GB あたり月額約 $0.026 です。&lt;/p>
&lt;p>そして、関数のデプロイごとに約 1 分の Cloud Build による処理が行われます。
料金は $0.003/ビルド分 ですが、1 日あたり最初の 120 ビルド分は無料です。&lt;/p>
&lt;p>はい、もうほとんど無料ですね。&lt;/p>
&lt;p>Firebase の料金プランは、Spark → Blaze にアップグレードしておく必要があります。
また、有効な支払い方法を登録しておく必要があります。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="./p/minecraft-server-monitor/image_1.jpg" data-size="3584x2240">
&lt;img src="./p/minecraft-server-monitor/image_1.jpg"
width="3584"
height="2240"
srcset="./p/minecraft-server-monitor/image_1_huebd564048d03d880e7b94b29a373ffaf_209243_480x0_resize_q75_box.jpg 480w, ./p/minecraft-server-monitor/image_1_huebd564048d03d880e7b94b29a373ffaf_209243_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Firebase 料金プラン">
&lt;/a>
&lt;figcaption>Firebase 料金プラン&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="cloud-functions-プロジェクトの作成">Cloud Functions プロジェクトの作成&lt;/h2>
&lt;p>Cloud Functions にデプロイするには、Firebase CLI を導入する必要があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ npm install -g firebase-tools
&lt;/code>&lt;/pre>&lt;/div>&lt;p>お使いの Google アカウントでログインしておく必要があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ firebase login
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最後に、プロジェクトを新規作成するには&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ firebase init
&lt;/code>&lt;/pre>&lt;/div>&lt;p>で新規プロジェクトを作成できます。が&amp;hellip;&lt;/p>
&lt;h2 id="firebase-init-でハマった">firebase init でハマった！&lt;/h2>
&lt;p>&lt;code>firebase init&lt;/code> を実行すると、なにやら不穏なメッセージが出ます。&lt;/p>
&lt;blockquote>
&lt;p>Error: Cloud resource location is not set for this project but the operation you are attempting to perform in Cloud Firestore requires it. Please see this documentation for more details: &lt;a class="link" href="https://firebase.google.com/docs/projects/locations" target="_blank" rel="noopener"
>https://firebase.google.com/docs/projects/locations&lt;/a> .&lt;/p>
&lt;/blockquote>
&lt;p>新規 Firebase プロジェクトを利用する際には、初めにリージョンを設定しておかないといけないそうです！&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="./p/minecraft-server-monitor/image_2.jpg" data-size="3584x2240">
&lt;img src="./p/minecraft-server-monitor/image_2.jpg"
width="3584"
height="2240"
srcset="./p/minecraft-server-monitor/image_2_hu7048dd8b05c9613e4649769026d471c5_169502_480x0_resize_q75_box.jpg 480w, ./p/minecraft-server-monitor/image_2_hu7048dd8b05c9613e4649769026d471c5_169502_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="デフォルトの GCP リソースロケーション を設定">
&lt;/a>
&lt;figcaption>デフォルトの GCP リソースロケーション を設定&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>GCP リソースロケーションについては、以下の通りです。一度設定すると変更することができないので注意です！&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">リージョン名（Tier 1）&lt;/th>
&lt;th style="text-align:left">地域&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">us-central1&lt;/td>
&lt;td style="text-align:left">アイオワ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">us-east1&lt;/td>
&lt;td style="text-align:left">サウスカロライナ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">us-east4&lt;/td>
&lt;td style="text-align:left">北バージニア&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">europe-west1&lt;/td>
&lt;td style="text-align:left">ベルギー&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">europe-west2&lt;/td>
&lt;td style="text-align:left">ロンドン&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">asia-east2&lt;/td>
&lt;td style="text-align:left">香港&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">asia-northeast1&lt;/td>
&lt;td style="text-align:left">東京&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">asia-northeast2&lt;/td>
&lt;td style="text-align:left">大阪&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>無難に、&lt;code>asia-northeast1&lt;/code> か &lt;code>asia-northeast2&lt;/code> あたりがいいと思います。&lt;/p>
&lt;p>これできちんと新規プロジェクトの作成ができました！&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 141;
flex-basis: 338px"
>
&lt;a href="./p/minecraft-server-monitor/image_3.png" data-size="1364x966">
&lt;img src="./p/minecraft-server-monitor/image_3.png"
width="1364"
height="966"
srcset="./p/minecraft-server-monitor/image_3_hu1f09cff624b0d1511c86c3ae5e22fc41_305498_480x0_resize_box_3.png 480w, ./p/minecraft-server-monitor/image_3_hu1f09cff624b0d1511c86c3ae5e22fc41_305498_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Firebase プロジェクトの新規作成">
&lt;/a>
&lt;figcaption>Firebase プロジェクトの新規作成&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="cloud-functions-の環境変数について">Cloud Functions の環境変数について&lt;/h2>
&lt;p>Cloud Functions には、環境変数を設定できるのですが、&lt;code>.env&lt;/code> ファイルではありません。
firebaseプロジェクト内に、オブジェクト形式で保存されていきます。&lt;/p>
&lt;p>例えば今回のプロジェクトでは、&lt;code>address&lt;/code> と &lt;code>port&lt;/code> という環境変数が必要になるのですが、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ firebase functions:config:set server.address&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;minecraft-sample-server.com&amp;#34;&lt;/span> server.port&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;25565&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記のコマンドで、環境変数を設定できます。&lt;/p>
&lt;p>プロジェクトの環境構成に現在保存されているものを調べるには、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ firebase functions:config:get
&lt;/code>&lt;/pre>&lt;/div>&lt;p>で、JSON が出力されます。&lt;/p>
&lt;h2 id="環境変数をローカルエミュレート時に使えるようにする">環境変数をローカルエミュレート時に使えるようにする&lt;/h2>
&lt;p>Cloud Functions の環境変数を、ローカルエミュレート時にも使うことは多いと思います。&lt;/p>
&lt;p>調べてみたところ、&lt;code>.runtimeconfig.json&lt;/code> というファイルに環境変数の JSON を出力して
&lt;code>functions&lt;/code> ディレクトリ直下に置いておくことで、ローカルでも環境変数を取り込むことができるそうです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ firebase functions:config:get &amp;gt; .runtimeconfig.json
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="今回作成したもの">今回作成したもの&lt;/h2>
&lt;p>Minecraft サーバーを監視し、サーバーが落ちた際に Discord に通知してくれるサービス（Worker）を作成しました。&lt;/p>
&lt;p>詳しくは以下の GitHub リポジトリを参照してください！&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 68;
flex-basis: 164px"
>
&lt;a href="./p/minecraft-server-monitor/image_4.jpg" data-size="1482x2168">
&lt;img src="./p/minecraft-server-monitor/image_4.jpg"
width="1482"
height="2168"
srcset="./p/minecraft-server-monitor/image_4_hu4d3f0ea5b8f2776ddc2a4936fd24a230_142004_480x0_resize_q75_box.jpg 480w, ./p/minecraft-server-monitor/image_4_hu4d3f0ea5b8f2776ddc2a4936fd24a230_142004_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="minecraft-server-monitor (README)">
&lt;/a>
&lt;figcaption>minecraft-server-monitor (README)&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="minecraft-server-monitor" >minecraft-server-monitor&lt;/a>　Monitor your Minecraft server and let Discord know the status 🖥&lt;/p>
&lt;/blockquote>
&lt;h2 id="discord-の-情クラ-minecraftサーバー-チャンネル">Discord の 情クラ (minecraftサーバー) チャンネル&lt;/h2>
&lt;p>Discord にサーバの状態をログとして投げてくれます。&lt;/p>
&lt;p>ボットの名前とアイコンは、メンバーに勝手に変えられているので気にしないでください。。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 370;
flex-basis: 888px"
>
&lt;a href="./p/minecraft-server-monitor/image_5.jpg" data-size="1184x320">
&lt;img src="./p/minecraft-server-monitor/image_5.jpg"
width="1184"
height="320"
srcset="./p/minecraft-server-monitor/image_5_huef166d70a36918b139d83edb3125647c_16621_480x0_resize_q75_box.jpg 480w, ./p/minecraft-server-monitor/image_5_huef166d70a36918b139d83edb3125647c_16621_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="一般的なログ">
&lt;/a>
&lt;figcaption>一般的なログ&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>また、GCP の minecraft サーバーが落ちたときは、通知用チャンネルに投稿されます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 385;
flex-basis: 926px"
>
&lt;a href="./p/minecraft-server-monitor/image_6.jpg" data-size="1204x312">
&lt;img src="./p/minecraft-server-monitor/image_6.jpg"
width="1204"
height="312"
srcset="./p/minecraft-server-monitor/image_6_hub09a344d6e7e38b0bb8902af27ffb694_16240_480x0_resize_q75_box.jpg 480w, ./p/minecraft-server-monitor/image_6_hub09a344d6e7e38b0bb8902af27ffb694_16240_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="サーバーが落ちた時のログ">
&lt;/a>
&lt;figcaption>サーバーが落ちた時のログ&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>Firebase は最高ですね！&lt;/p></description></item><item><title>Hugo + GitHub Pages + 独自ドメイン でサイトを構築する</title><link>https://coalabo.net/p/hugo/</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0900</pubDate><guid>https://coalabo.net/p/hugo/</guid><description>&lt;img src="https://coalabo.net/p/hugo/cover.jpg" alt="Featured image of post Hugo + GitHub Pages + 独自ドメイン でサイトを構築する" />&lt;h2 id="ブログを始めてみたい">ブログを始めてみたい！&lt;/h2>
&lt;p>ブログを始めたいと思ったきっかけは、自分が作ったサービスが終了してしまうことでした。&lt;/p>
&lt;p>せっかく作ったものが消えて日の目を浴びなくなるのは勿体ないので、
ブログという形で供養してやります！&lt;/p>
&lt;h2 id="なんかかっこいい方法でホスティングしたい">なんかかっこいい方法でホスティングしたい&lt;/h2>
&lt;p>第一として、運用費用があまりかからないようにする必要があります。
なので、Nuxt.js を使って静的サイトを書き出し、GitHub Pages にデプロイしようかと考えていました。&lt;/p>
&lt;p>ただ、フロントエンドやデザインのお仕事が続いており、自分でフロントを作成するのもなんだかなぁという状態でした。&lt;/p>
&lt;p>とその時、知り合いからHugoを布教されました。なんとHugoにはテンプレートがたくさんあるじゃないですか！&lt;/p>
&lt;p>Hugoは触ったことがなかったので、勉強がてら（といっても使い方の知見を得るだけですが）これを使ってブログを作成することにしました。&lt;/p>
&lt;h2 id="書き出しめっちゃ速い">書き出しめっちゃ速い！！&lt;/h2>
&lt;p>記事を Markdown で書いていくのですが、保存するたびホットリロードでブラウザに反映してくれます。&lt;/p>
&lt;p>その速度が明らかに速いのです！（私が React や Nuxt.js などに慣れているからかもしれませんが&amp;hellip;）&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="./p/hugo/image_1.jpg" data-size="3584x2240">
&lt;img src="./p/hugo/image_1.jpg"
width="3584"
height="2240"
srcset="./p/hugo/image_1_hu8149e3cc377252b5c483f556b468b391_305877_480x0_resize_q75_box.jpg 480w, ./p/hugo/image_1_hu8149e3cc377252b5c483f556b468b391_305877_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="書き出し速度がやばい！">
&lt;/a>
&lt;figcaption>書き出し速度がやばい！&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Terminal 上に表示されている再レンダリング時間は &lt;code>9ms&lt;/code> とでていますね。&lt;/p>
&lt;p>もう、一目惚れしました。&lt;/p>
&lt;h2 id="github-pages-にデプロイしよう">GitHub Pages にデプロイしよう&lt;/h2>
&lt;p>すいません、タイトル詐欺です。
デプロイする前に1つすることがありました。&lt;/p>
&lt;p>今回 &lt;a class="link" href="https://themes.gohugo.io/hugo-theme-stack" target="_blank" rel="noopener"
>Hugo Theme Stack&lt;/a>というテーマパックを編集して使ったのですが、
これを submodule 登録しておきます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ git submodule add https://github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack
&lt;/code>&lt;/pre>&lt;/div>&lt;p>また、git から clone する時は、submodule も忘れず引っ張ってくるようにしましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ git clone --recurse-submodules --depth &lt;span class="m">1&lt;/span> git@github.com:smpny7/coalabo.git
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="github-actions-で自動化しよう">GitHub Actions で自動化しよう&lt;/h2>
&lt;p>今度こそ、GitHub Actions で GitHub Pages に自動デプロイするように設定していきます。&lt;/p>
&lt;p>今回 GitHub Pages 用に、&lt;code>&amp;lt;GitHub ユーザー名&amp;gt;.github.io&lt;/code> のリポジトリを作成しました。
なぜそうしたかというと、&lt;code>https://&amp;lt;GitHub ユーザー名&amp;gt;.github.io&lt;/code> でそのサイトが閲覧できるようになるからです。&lt;/p>
&lt;p>ドメイン後にパスが続かないのは、カスタムドメインを設定する際に大切です。&lt;/p>
&lt;p>GitHub Actions には &lt;a class="link" href="https://github.com/marketplace/actions/github-pages-action#getting-started" target="_blank" rel="noopener"
>GitHub Pages action&lt;/a> というのが
マーケットプレイスに公開されていたので、これを参考に作成しました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">github pages&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">main &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Set a branch name to trigger deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-18.04&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch Hugo themes (true OR recursive)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fetch-depth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch all history for .GitInfo and .Lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup Hugo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-hugo@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hugo-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;0.78.2&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hugo --minify&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># - name: Deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># uses: peaceiris/actions-gh-pages@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># with:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># github_token: ${{ secrets.GITHUB_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># publish_dir: ./public&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-gh-pages@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy_key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">external_repository&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">smpny7/smpny7.github.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">publish_branch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">main&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">coalabo.net&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>submodule を一緒に引っ張ってくるのも、忘れないように設定しましょう。&lt;/p>
&lt;p>そして GitHub の Secrets に、&lt;code>ACTIONS_DEPLOY_KEY&lt;/code> という名前で SSH のプライベートキーを設定しておきます。&lt;/p>
&lt;h2 id="ドメインが-35円だと">ドメインが 35円だと！？&lt;/h2>
&lt;p>本当にたまたまです。&lt;code>.com&lt;/code> ドメインや &lt;code>.net&lt;/code> ドメインが 35円セールしてました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="./p/hugo/image_2.jpg" data-size="3584x2240">
&lt;img src="./p/hugo/image_2.jpg"
width="3584"
height="2240"
srcset="./p/hugo/image_2_hu5d36e630e58f4aa4adc485db5ac4c17f_208524_480x0_resize_q75_box.jpg 480w, ./p/hugo/image_2_hu5d36e630e58f4aa4adc485db5ac4c17f_208524_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="お名前.com（2021/4/28 執筆時点）">
&lt;/a>
&lt;figcaption>お名前.com（2021/4/28 執筆時点）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ドメイン移管が安くなるのはしょっちゅう見てましたが、ドメイン自体が安くなっているのを見たのは初めてでした！&lt;/p>
&lt;p>サイト名に迷走して、3つくらいドメインをとってしまったのは秘密です。&lt;/p>
&lt;h2 id="取得したドメイン名に設定しよう">取得したドメイン名に設定しよう&lt;/h2>
&lt;p>お名前.com の管理画面に行き、&lt;code>DNS 設定 &amp;gt; DNSレコード設定を利用する&lt;/code> を選択します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="./p/hugo/image_3.jpg" data-size="3584x2240">
&lt;img src="./p/hugo/image_3.jpg"
width="3584"
height="2240"
srcset="./p/hugo/image_3_hu85482214b96a242b2bdfb1cde4d6b35f_243704_480x0_resize_q75_box.jpg 480w, ./p/hugo/image_3_hu85482214b96a242b2bdfb1cde4d6b35f_243704_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="DNS 設定画面（お名前.com）">
&lt;/a>
&lt;figcaption>DNS 設定画面（お名前.com）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Aレコードに、GitHub Pages のアドレスを入力します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="./p/hugo/image_4.jpg" data-size="3584x2240">
&lt;img src="./p/hugo/image_4.jpg"
width="3584"
height="2240"
srcset="./p/hugo/image_4_hufeaa9d87c36b47ae481adf1c8c626989_203520_480x0_resize_q75_box.jpg 480w, ./p/hugo/image_4_hufeaa9d87c36b47ae481adf1c8c626989_203520_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="DNS 設定（お名前.com）">
&lt;/a>
&lt;figcaption>DNS 設定（お名前.com）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>本来は、CNAMEレコードに &lt;code>github.io&lt;/code> のドメインを登録するのが良いのですが、
私の場合うまく動かなかったので Aレコードで登録しました。&lt;/p>
&lt;p>GitHub Pages の仕様変更によって、グローバルIPアドレスが変わる恐れもあるので、その辺りは今後の検討課題です。&lt;/p>
&lt;h2 id="google-search-console-を登録する">Google Search Console を登録する&lt;/h2>
&lt;p>Google Search Console とは、検索順位やサイト内のエラーを取得してくれる Google のサービスです。
通称 Googleサチコです。&lt;/p>
&lt;p>今回登録するにあたり、サイト所有確認なのですが、ドメイン認証にしようと思っているのでここで設定してしまいましょう。&lt;/p>
&lt;p>先程のレコード登録画面で、レコードを &lt;code>TXT&lt;/code>に、&lt;code>VALUE&lt;/code>をサチコで表示されたコードに設定します。&lt;/p>
&lt;blockquote>
&lt;p>諸説ありますが、最後の「転送用のネームサーバーに変更する」は一応チェックを外しておきましょう。&lt;/p>
&lt;/blockquote>
&lt;h2 id="github-actions-を設定">GitHub Actions を設定&lt;/h2>
&lt;p>構築も終盤にさしかかってきました。&lt;/p>
&lt;p>GitHub Pages 設定の &lt;code>Custom domain&lt;/code> 項目に、使用したいドメインを入力します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="./p/hugo/image_5.jpg" data-size="3584x2240">
&lt;img src="./p/hugo/image_5.jpg"
width="3584"
height="2240"
srcset="./p/hugo/image_5_hu419880e7adf0b4b46369bc2b7604e25d_163480_480x0_resize_q75_box.jpg 480w, ./p/hugo/image_5_hu419880e7adf0b4b46369bc2b7604e25d_163480_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="GitHub Pages 設定画面">
&lt;/a>
&lt;figcaption>GitHub Pages 設定画面&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Save を押すと、ドメインが &lt;code>github.io&lt;/code> に転送されるかのチェックが行われます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="./p/hugo/image_6.jpg" data-size="3584x2240">
&lt;img src="./p/hugo/image_6.jpg"
width="3584"
height="2240"
srcset="./p/hugo/image_6_hu3255b2e7721e4256d8fe9e3ebeb8ac27_185338_480x0_resize_q75_box.jpg 480w, ./p/hugo/image_6_hu3255b2e7721e4256d8fe9e3ebeb8ac27_185338_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="GitHub Pages 設定画面">
&lt;/a>
&lt;figcaption>GitHub Pages 設定画面&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>確認されたら &lt;code>Enforce HTTPS&lt;/code> が選択できるようになるので、チェックを入れておきましょう。&lt;/p>
&lt;h2 id="でたな-gtagjs定期">でたな gtag.js（定期）&lt;/h2>
&lt;p>Google Analytics が最近変更になったらしく、昔は &lt;code>UA-XXXXXX-X&lt;/code> というタグだったのですが、
今は Gタグと呼ばれる &lt;code>G-XXXXXXX&lt;/code> というものに変更されています。&lt;/p>
&lt;p>これに伴い、JavaScript 部分も変更になるので、使用していたテーマパックの Google Analytics が正常に動きませんでした。&lt;/p>
&lt;p>私の使用しているテーマパックでは以下のように対応しました。&lt;/p>
&lt;ol>
&lt;li>&lt;code>layouts &amp;gt; partials &amp;gt; head &amp;gt; custom.html&lt;/code> というファイルを作成すると、そこに記述されたコードがサイトの &lt;code>head&lt;/code> に挿入されることがわかった。&lt;/li>
&lt;li>カスタムテーマにしたかったので、&lt;code>custom.html&lt;/code> から &lt;code>style用ファイル&lt;/code> と &lt;code>analytics用 JSファイル&lt;/code> を読み込みようにした。&lt;/li>
&lt;/ol>
&lt;p>&lt;code>style用ファイル&lt;/code> には自分がカスタムした部分のCSSを、
&lt;code>analytics用 JSファイル&lt;/code>には例の Google Analytics 用コード9行が書かれています。&lt;/p>
&lt;p>また、customファイルは以下の通りです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="c">&amp;lt;!-- Custom Style --&amp;gt;&lt;/span>
{{ partial &amp;#34;style/custom&amp;#34; . }}
&lt;span class="c">&amp;lt;!-- Analytics --&amp;gt;&lt;/span>
{{ if not .Site.IsServer }}
{{ partial &amp;#34;google/analytics&amp;#34; . }}
{{ end }}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>↑ デバッグでは Google Analytics がうごかないようにしています&lt;/p>
&lt;h2 id="さいごに">さいごに&lt;/h2>
&lt;p>カスタマイズしたサイトは以下のようになりました！&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="./p/hugo/image_7.jpg" data-size="1920x1080">
&lt;img src="./p/hugo/image_7.jpg"
width="1920"
height="1080"
srcset="./p/hugo/image_7_hu58039191d79a61d8b912ab889f247e25_85720_480x0_resize_q75_box.jpg 480w, ./p/hugo/image_7_hu58039191d79a61d8b912ab889f247e25_85720_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="COALABO. 完成">
&lt;/a>
&lt;figcaption>COALABO. 完成&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>自分があまりチャレンジしたことのない配色でデザインしてみたのですが、
結構きれいにまとまってて気に入ってます！&lt;/p>
&lt;p>データの蓄積された Google Analytics をみるのが楽しみです。&lt;/p></description></item><item><title>草bot (wbot) の開発談</title><link>https://coalabo.net/p/wbot/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0900</pubDate><guid>https://coalabo.net/p/wbot/</guid><description>&lt;img src="https://coalabo.net/p/wbot/cover.jpg" alt="Featured image of post 草bot (wbot) の開発談" />&lt;h2 id="察してくださいネタ回です">察してください、ネタ回です&lt;/h2>
&lt;p>Molly fantasy って実在したんですね。&lt;/p>
&lt;p>今回は、友人十数名が入ったDiscordサーバーがあるのですが、
そのサーバー用の Bot を作った、という箸休め回です。&lt;/p>
&lt;p>この Bot は、みんなが登録したキーワードを打つと対応した語録を発言してくれます。&lt;/p>
&lt;h2 id="なんか盛り上がってつくることになった">なんか盛り上がって、つくることになった&lt;/h2>
&lt;p>草Botくん、「草」という文字が入っていると、「草」と返してくれることからこの名前がついたんです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 593;
flex-basis: 1424px"
>
&lt;a href="./p/wbot/image_1.jpg" data-size="801x135">
&lt;img src="./p/wbot/image_1.jpg"
width="801"
height="135"
srcset="./p/wbot/image_1_hua3bf971103680b20a1b666a9fc2d9a8e_4219_480x0_resize_q75_box.jpg 480w, ./p/wbot/image_1_hua3bf971103680b20a1b666a9fc2d9a8e_4219_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="草Botくん">
&lt;/a>
&lt;figcaption>草Botくん&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>実はこの草Bot、今はおもちゃにされています。&lt;/p>
&lt;p>もはやBotの表示名も変えられてますw&lt;/p>
&lt;h2 id="敗因-誰でもプルリクok自動デプロイ仕様にしてしまった">敗因: 誰でもプルリクOK＆自動デプロイ仕様にしてしまった&lt;/h2>
&lt;p>最初は「草」と返してくれる Bot だったのですが、サーバーメンバーがこの Bot にどんどん単語を登録していきました。
ただ、そのセンスがかなり良すぎるので、本来の目的が語録に変わって私も大満足です(笑)&lt;/p>
&lt;p>せっかくなので、自分のお気に入り語録を紹介しましょう。&lt;/p>
&lt;hr>
&lt;p>これ何だかわかりますか？&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 445;
flex-basis: 1068px"
>
&lt;a href="./p/wbot/image_2.jpg" data-size="801x180">
&lt;img src="./p/wbot/image_2.jpg"
width="801"
height="180"
srcset="./p/wbot/image_2_hu7a9c175328f5b7d4755e767439989923_8444_480x0_resize_q75_box.jpg 480w, ./p/wbot/image_2_hu7a9c175328f5b7d4755e767439989923_8444_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="お気に入り語録 その1">
&lt;/a>
&lt;figcaption>お気に入り語録 その1&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>↑ これをみてピンときた人はさすがですね ！&lt;/p>
&lt;hr>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 447;
flex-basis: 1073px"
>
&lt;a href="./p/wbot/image_3.jpg" data-size="801x179">
&lt;img src="./p/wbot/image_3.jpg"
width="801"
height="179"
srcset="./p/wbot/image_3_hucc9b73f89db2386e0e79142d46a04e8c_12036_480x0_resize_q75_box.jpg 480w, ./p/wbot/image_3_hucc9b73f89db2386e0e79142d46a04e8c_12036_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="実はこれ">
&lt;/a>
&lt;figcaption>実はこれ&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>これですね！いつものやつです。&lt;/p>
&lt;p>実は以前、みんなで Raspberry Pi OS をセットアップしてた時ですが、
日本語化がうまくいかず、文字化けで何も見えない現象が発生してしまいました。&lt;/p>
&lt;p>唯一文字化けしていても意味がわかった文面が上の文字列で、&lt;/p>
&lt;blockquote>
&lt;p>伏字にしているのに、隠せれてないwwww&lt;/p>
&lt;/blockquote>
&lt;p>という経緯で追加されました(笑)&lt;/p>
&lt;hr>
&lt;p>もう一つのお気に入りはこれです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 419;
flex-basis: 1006px"
>
&lt;a href="./p/wbot/image_4.jpg" data-size="801x191">
&lt;img src="./p/wbot/image_4.jpg"
width="801"
height="191"
srcset="./p/wbot/image_4_hu481bc9f7a64d92da7e96f4cf74784a11_7355_480x0_resize_q75_box.jpg 480w, ./p/wbot/image_4_hu481bc9f7a64d92da7e96f4cf74784a11_7355_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="「腹痛」に反応します">
&lt;/a>
&lt;figcaption>「腹痛」に反応します&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>「腹痛」という単語を聞くと、よくわからない係数を測ってくれ、それに応じてアナウンスが流れます。&lt;/p>
&lt;blockquote>
&lt;p>元ネタはこちら &lt;a class="link" href="https://dic.nicovideo.jp/a/%E3%83%89%E3%83%9F%E3%83%8D%E3%83%BC%E3%82%BF%E3%83%BC%28psycho-pass%29" target="_blank" rel="noopener"
>ニコニコ大百科（ドミネーター）&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>しかもこれは、例のよくわからない係数（乱数）に応じてメッセージが変わります。&lt;/p>
&lt;h2 id="今回の技術的なコト">今回の技術的なコト&lt;/h2>
&lt;p>Node.js で作りましたが、Bot はすぐできるので記事にするほどでもないかと思います。&lt;/p>
&lt;p>詳しくは以下のドキュメントをどうぞ！&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Discord.js&lt;/strong> &lt;a class="link" href="https://discord.js.org" target="_blank" rel="noopener"
>https://discord.js.org&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>今回、この Bot は &lt;a class="link" href="https://jp.heroku.com/home" target="_blank" rel="noopener"
>Heroku&lt;/a>にデプロイしているので、こちらの知見を共有したいと思います。&lt;/p>
&lt;p>Herokuでは、GitHubリポジトリとHerokuAppを連携させることができます。連携しておくと、
GitHubのmainブランチにプッシュされた時に Webhook が飛ばされ Heroku に自動でデプロイされるのでとても便利です。&lt;/p>
&lt;p>ただ今回、気をつける点が2つありました。&lt;/p>
&lt;ul>
&lt;li>Procfile を作成すること&lt;/li>
&lt;li>プロセスタイプを worker に設定すること&lt;/li>
&lt;/ul>
&lt;p>この2つを共有して、本記事の締めにしたいと思います。&lt;/p>
&lt;h2 id="procfile-を作成すること">Procfile を作成すること&lt;/h2>
&lt;p>Procfile とは、デプロイ時にどのようなコマンドで run（開始）するかを記述したものです。&lt;/p>
&lt;p>&lt;strong>Procfile | Heroku Dev Center&lt;/strong> には以下のような記述があります。&lt;/p>
&lt;blockquote>
&lt;p>Herokuによりサポートされているほとんどの言語で書かれたアプリをデプロイするのに、Procfileは必要はありません。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>プラットフォームが使われている言語を自動的に検知し、アプリケーションサーバーを起動するために、デフォルトのwebプロセスタイプを作成してくれます。&lt;/p>
&lt;/blockquote>
&lt;p>しかし自動的に検知してくれなかったのか、私の環境では実行されなかったので &lt;code>Procfile&lt;/code> を作成しました。&lt;/p>
&lt;p>書き方は以下の通りです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">(&lt;/span>processType&lt;span class="o">)&lt;/span> : &lt;span class="o">(&lt;/span>&lt;span class="nb">command&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>今回の場合、以下の記述が必要です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">worker: node index.js
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Procfile&lt;/code> はアプリのルートディレクトリに設置する必要があります。&lt;/p>
&lt;h2 id="dyno-を-worker-に設定すること">dyno を worker に設定すること&lt;/h2>
&lt;p>もう1つ、今回 Heroku 独特のプロセス処理の種類である &lt;code>dyno&lt;/code> をデフォルトから変更する必要がありました。&lt;/p>
&lt;p>dyno には &lt;code>web&lt;/code> , &lt;code>worker&lt;/code> , &lt;code>one-off&lt;/code> の3種類があります。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>種類&lt;/th>
&lt;th>機能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Web&lt;/td>
&lt;td>ルーターから HTTP トラフィックを受信し、通常は Web サーバーを実行します。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Worker&lt;/td>
&lt;td>バックグラウンドジョブ、キューイングシステム、時間指定のあるジョブなどを実行します。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>One-off&lt;/td>
&lt;td>管理タスクの処理（REPL シェルを実行してデータベースの移行や一時的なバックグラウンド作業を行う場合など）に使用します。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>今回、Discord Bot では常にチャンネルのテキストを取得する必要があるため、&lt;code>worker&lt;/code> に設定する必要があります。&lt;/p>
&lt;p>HerokuCLI を導入している場合は、以下のコマンドで &lt;code>worker&lt;/code> に切り替えることができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">heroku ps:scale &lt;span class="nv">worker&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="さいごに">さいごに&lt;/h2>
&lt;p>なんだかんだ、やっぱりBotがいてくれると楽しいですよね。&lt;/p>
&lt;p>次はもっと有用な Bot を作りたいと思います (笑)&lt;/p></description></item><item><title>アプリ版 Minecraft サーバー制御ツールの制作</title><link>https://coalabo.net/p/jokura-app/</link><pubDate>Fri, 23 Apr 2021 09:19:41 +0900</pubDate><guid>https://coalabo.net/p/jokura-app/</guid><description>&lt;img src="https://coalabo.net/p/jokura-app/cover.jpg" alt="Featured image of post アプリ版 Minecraft サーバー制御ツールの制作" />&lt;h2 id="やっぱアプリ化したいよね">やっぱアプリ化、したいよね！！&lt;/h2>
&lt;p>Webベースのツールを作ると、そのアプリ版を作りたくなる、ここまでがテンプレですよね。&lt;/p>
&lt;p>今回は、ストアにリリースが手軽な Android アプリを制作したいと思います。&lt;/p>
&lt;h2 id="android-studio-使いやすい">Android Studio 使いやすい&amp;hellip;&lt;/h2>
&lt;p>この時、プログラミングというものに触れてまだ半年もたっていませんでした。
なので初心者でも使いやすい Visual Studio Code を当時愛用していました。（今でも時々使っています）&lt;/p>
&lt;p>しかし今回アプリ開発というのもあり、デバッグのしやすいエディタを使うことにしました。
まぁもちろん Android Studio 一択になるわけですが。
JetBrains 社が開発したソフトウェアを初めて触ったのですが、
これがまた使いやすいソフトウェアで感動したのを覚えています。
（私が JetBrains 信徒になる話はまたいつか）&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 157;
flex-basis: 378px"
>
&lt;a href="./p/jokura-app/image_1.png" data-size="3808x2414">
&lt;img src="./p/jokura-app/image_1.png"
width="3808"
height="2414"
srcset="./p/jokura-app/image_1_hu8e2bc46808c320c0a577ca01858cd9e2_1191307_480x0_resize_box_3.png 480w, ./p/jokura-app/image_1_hu8e2bc46808c320c0a577ca01858cd9e2_1191307_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Android Studio のデザイン画面">
&lt;/a>
&lt;figcaption>Android Studio のデザイン画面&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="さぁ開発だ">さぁ開発だ！&lt;/h2>
&lt;p>の前に、デザインを作っていきます。&lt;/p>
&lt;p>スマホによってサイズが異なるので、対応できるデザインを意識して作成しました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 174;
flex-basis: 417px"
>
&lt;a href="./p/jokura-app/image_2.png" data-size="4064x2334">
&lt;img src="./p/jokura-app/image_2.png"
width="4064"
height="2334"
srcset="./p/jokura-app/image_2_hu1b6d1af6b273a6db207a0e3a4b141e0a_1388025_480x0_resize_box_3.png 480w, ./p/jokura-app/image_2_hu1b6d1af6b273a6db207a0e3a4b141e0a_1388025_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Adobe XD">
&lt;/a>
&lt;figcaption>Adobe XD&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="コーディング-すべしぬべし">コーディング すべしぬべし&lt;/h2>
&lt;p>今回の技術的な部分です。サーバーの様子を取得するのとリクエストを送る機能をつけます！（大したことはしてませんが）&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 53;
flex-basis: 128px"
>
&lt;a href="./p/jokura-app/image_3.jpg" data-size="720x1344">
&lt;img src="./p/jokura-app/image_3.jpg"
width="720"
height="1344"
srcset="./p/jokura-app/image_3_hu9872aa2b6807dbab56e95d68534cb1bc_7150_480x0_resize_q75_box.jpg 480w, ./p/jokura-app/image_3_hu9872aa2b6807dbab56e95d68534cb1bc_7150_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="スプラッシュ画面（情クラ！アプリ）">
&lt;/a>
&lt;figcaption>スプラッシュ画面（情クラ！アプリ）&lt;/figcaption>
&lt;/figure>&lt;figure
class="gallery-image"
style="
flex-grow: 53;
flex-basis: 128px"
>
&lt;a href="./p/jokura-app/image_4.jpg" data-size="720x1344">
&lt;img src="./p/jokura-app/image_4.jpg"
width="720"
height="1344"
srcset="./p/jokura-app/image_4_hube6eee43bd7073f82c8bd897121f032a_40381_480x0_resize_q75_box.jpg 480w, ./p/jokura-app/image_4_hube6eee43bd7073f82c8bd897121f032a_40381_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="ホーム（情クラ！アプリ）">
&lt;/a>
&lt;figcaption>ホーム（情クラ！アプリ）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>まず、オンラインプレイヤーの取得部分です。
ホーム画面の上半分には、オンラインのメンバーが一覧でわかるようにしています。&lt;/p>
&lt;p>今回、Minecraftの画像を取得するAPIを自作しました。
そこからAndroidに画像を取得するようにしています。
APIからの画像取得には、Picasso というライブラリを使用しました。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Picasso（公式サイト）&lt;/strong> &lt;a class="link" href="https://square.github.io/picasso/" target="_blank" rel="noopener"
>https://square.github.io/picasso/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>具体的には、以下のような書き方でさくっとインターネットから画像取得ができちゃうものです！&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">Picasso&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://jokura.net/api/getSkin?id=minecraft_id&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 今回作成したAPI
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">into&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">face1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>face1&lt;/code>というのは ImageView の id で、APIから取得した画像を流し込んでくれます！&lt;/p>
&lt;p>また、プレイヤーがオンラインかどうかは、用意したAPIから返ってきた情報を元に表示を切り替えます。
APIからのGET・POSTメソッドには、便利な OkHttp3 などの便利なライブラリがありますが、
この時は初心者だったこともあり、Java通信（HttpUrlConnection）で実装しました(笑)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">connection&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpURLConnection&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">reader&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">BufferedReader&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="nx">val&lt;/span> &lt;span class="nx">buffer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">StringBuffer&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">val&lt;/span> &lt;span class="nx">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">URL&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="cm">/* 通信するAPI */&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="nx">connection&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">openConnection&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">as&lt;/span> &lt;span class="nx">HttpURLConnection&lt;/span>
&lt;span class="nx">connection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// ここで指定したAPIを叩いています。
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 取得したデータを処理していきます。とりあえず取得した文字をbufferに。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="nx">stream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">connection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">inputStream&lt;/span>
&lt;span class="nx">reader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">BufferedReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">InputStreamReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stream&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nx">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">StringBuffer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">line&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="o">?&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readLine&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">line&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">break&lt;/span>
&lt;span class="nx">buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// ここからJSONに変換していきます。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="nx">jsonText&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">val&lt;/span> &lt;span class="nx">parentJsonObj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSONObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">jsonText&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// オンラインメンバーの情報は、JSON内の top というキーの中に格納してあります。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="nx">parentJsonArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">parentJsonObj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getJSONArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;top&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">val&lt;/span> &lt;span class="nx">detailJsonObj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">parentJsonArray&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getJSONObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// player1さんのオンライン状況が取得できました！
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="nx">player1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Int&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">detailJsonObj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;player1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">player1&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">MalformedURLException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">printStackTrace&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">IOException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">printStackTrace&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">JSONException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">printStackTrace&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 接続を切断してあげましょう。おつかれ！
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">finally&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">connection&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">disconnect&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">reader&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">IOException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">printStackTrace&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 失敗した時はnullやエラーコードなどを返しましょう。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一部抜粋していますが、こんな感じでリクエストをかいています。&lt;/p>
&lt;h2 id="ちょっと脱線しちゃいましたね">ちょっと脱線しちゃいましたね&lt;/h2>
&lt;p>他にどんな機能を実装したのかみてみましょう！たぶんこちらの方が興味ありますよね (笑)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 53;
flex-basis: 128px"
>
&lt;a href="./p/jokura-app/image_4.jpg" data-size="720x1344">
&lt;img src="./p/jokura-app/image_4.jpg"
width="720"
height="1344"
srcset="./p/jokura-app/image_4_hube6eee43bd7073f82c8bd897121f032a_40381_480x0_resize_q75_box.jpg 480w, ./p/jokura-app/image_4_hube6eee43bd7073f82c8bd897121f032a_40381_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="ホーム（情クラ！アプリ）">
&lt;/a>
&lt;figcaption>ホーム（情クラ！アプリ）&lt;/figcaption>
&lt;/figure>&lt;figure
class="gallery-image"
style="
flex-grow: 53;
flex-basis: 128px"
>
&lt;a href="./p/jokura-app/image_5.jpg" data-size="720x1344">
&lt;img src="./p/jokura-app/image_5.jpg"
width="720"
height="1344"
srcset="./p/jokura-app/image_5_huf368a7455d3e035d1fd15c1962bfe02c_60958_480x0_resize_q75_box.jpg 480w, ./p/jokura-app/image_5_huf368a7455d3e035d1fd15c1962bfe02c_60958_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="サーバー稼働状況（情クラ！アプリ）">
&lt;/a>
&lt;figcaption>サーバー稼働状況（情クラ！アプリ）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>トップ画面には、「バックアップ」と「再起動」の2つのボタンが用意してあります。
この2つのボタンについては後述します。&lt;/p>
&lt;p>また、「稼働状況」を押すとサーバーの現在の状況をみることができます。
今思うと、ここのデザインは Web 版と同じなので、
WebView で表示させるとよかったですね (笑)&lt;/p>
&lt;p>とりあえず、今回は xml ファイルで view を丁寧に記述しました。&lt;/p>
&lt;h2 id="今回のメインディッシュ">今回のメインディッシュ&lt;/h2>
&lt;p>本アプリのメイン機能は、なんといってもこの2つです！&lt;/p>
&lt;p>トップに設置されている「バックアップ」「再起動」の機能について説明します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 54;
flex-basis: 131px"
>
&lt;a href="./p/jokura-app/image_6.jpg" data-size="1080x1977">
&lt;img src="./p/jokura-app/image_6.jpg"
width="1080"
height="1977"
srcset="./p/jokura-app/image_6_hu833e6882c2e58499d7b79ac000a1192c_62734_480x0_resize_q75_box.jpg 480w, ./p/jokura-app/image_6_hu833e6882c2e58499d7b79ac000a1192c_62734_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="バックアップ 実行不可（情クラ！アプリ）">
&lt;/a>
&lt;figcaption>バックアップ 実行不可（情クラ！アプリ）&lt;/figcaption>
&lt;/figure>&lt;figure
class="gallery-image"
style="
flex-grow: 54;
flex-basis: 131px"
>
&lt;a href="./p/jokura-app/image_7.jpg" data-size="1080x1977">
&lt;img src="./p/jokura-app/image_7.jpg"
width="1080"
height="1977"
srcset="./p/jokura-app/image_7_huabd1397f24f4873519c9e062a2d6616d_61514_480x0_resize_q75_box.jpg 480w, ./p/jokura-app/image_7_huabd1397f24f4873519c9e062a2d6616d_61514_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="バックアップ 実行可能（情クラ！アプリ）">
&lt;/a>
&lt;figcaption>バックアップ 実行可能（情クラ！アプリ）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>この Activity の開始と同時に、バックエンドと通信して 再起動 または バックアップ が実行できるか確認して、表示を切り分けます。&lt;/p>
&lt;p>実行できない例としては、&lt;/p>
&lt;ul>
&lt;li>サーバーが停止している&lt;/li>
&lt;li>他のユーザが現在処理を行っている&lt;/li>
&lt;li>処理実行後のクールタイムにある&lt;/li>
&lt;/ul>
&lt;p>のいずれかですね。右上の更新ボタンで最新情報を再取得できます。&lt;/p>
&lt;h2 id="今回神経を使ったのは処理部分でした">今回、神経を使ったのは処理部分でした&lt;/h2>
&lt;p>なんといってもサーバー関連で怖いのが、リクエストが同時に送られることですよね。&lt;/p>
&lt;p>今回、サーバーを制御できるプラットフォームが複数あるため、他のアプリやWebサイトから同時にリクエストが送られた場合、最初のリクエストのみ通す必要があります。
また、再起動やバックアップなどが実行された後は、クールタイムを設ける必要もあります。&lt;/p>
&lt;p>そういった、さまざまなリクエストを処理できるように、情クラ！ではバックエンドのAPIを用意し、そこからサーバー処理を行っています。
リクエストが失敗した場合には、その理由をエラーコードで返しユーザに通知しています。
実行可能の状態でボタンを押した場合でも、バックエンドでキャンセルされた場合その旨のトーストが表示されます。&lt;/p>
&lt;h2 id="２年の月日を経て">２年の月日を経て&amp;hellip;&lt;/h2>
&lt;p>&lt;a class="link" href="../jokura-web" >前回の記事&lt;/a>でも述べた通り、情クラ！はサービス終了しました。&lt;/p>
&lt;p>今回、&amp;ldquo;プログラムの整合性&amp;rdquo; というものを勉強できた、サービス開発だったと思います。&lt;/p>
&lt;p>他にも Minecraft 関係で得た知見はかなり大きいものだったので、今後何か一般向けのサービスに繋げていきたいと思います。&lt;/p></description></item><item><title>Minecraftサーバーのリモート制御サイトを制作したお話（情クラ！）</title><link>https://coalabo.net/p/jokura-web/</link><pubDate>Thu, 22 Apr 2021 09:06:44 +0900</pubDate><guid>https://coalabo.net/p/jokura-web/</guid><description>&lt;img src="https://coalabo.net/p/jokura-web/cover.jpg" alt="Featured image of post Minecraftサーバーのリモート制御サイトを制作したお話（情クラ！）" />&lt;h2 id="minecraft-っていいよね">Minecraft っていいよね&lt;/h2>
&lt;p>Minecraft って、複数人でプレイすると沼ですよね。&lt;/p>
&lt;p>「 情クラ！」という、知り合い十数名程度の Minecraft サーバーで遊んでいるのですが、
今や大陸内には高速道路が広がり、複数の大陸間には大きな橋が建築されています。（やばすぎ）&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 192;
flex-basis: 462px"
>
&lt;a href="./p/jokura-web/image_1.jpg" data-size="2378x1233">
&lt;img src="./p/jokura-web/image_1.jpg"
width="2378"
height="1233"
srcset="./p/jokura-web/image_1_hu4afd0714b430b88aa4956b050a66bbf9_160480_480x0_resize_q75_box.jpg 480w, ./p/jokura-web/image_1_hu4afd0714b430b88aa4956b050a66bbf9_160480_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="瀬戸大橋（こんなのが 5, 6本架かっています）">
&lt;/a>
&lt;figcaption>瀬戸大橋（こんなのが 5, 6本架かっています）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="ある日minecraft-のサーバー管理者になった">ある日、Minecraft のサーバー管理者になった&lt;/h2>
&lt;p>最初はみんなで家に集まって、ローカルでサーバーを建ててプレイしていました。
しかしプレイヤーがどんどん増えてきたため、Google Cloud Platform（GCP）でサーバーを立てることにしました。&lt;/p>
&lt;p>これが、「情クラ！」という Minecraft サーバーの誕生のきっかけです。&lt;/p>
&lt;p>いつどこでも Minecraft サーバーで遊べる環境が完成し、ワールドの発展度合いが加速度的に大きくなったのですが、
しかし1つ大きな問題がでてきました。&lt;/p>
&lt;p>これは、Google Cloud Platform（GCP）がまだ365日無料トライアルだった頃の話なのですが、
当時GCPには、年間 30,000円分の無料クレジットが付属していました。
それをちょうど1年間で使い切る&lt;code>n1-standard-1&lt;/code> プラン（仮想 CPU 数: 1, メモリ: 3.75 GB）で運用していたのですが、
大人数が長時間プレイしていると動作がもっさりしてくるのです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 110;
flex-basis: 264px"
>
&lt;a href="./p/jokura-web/image_2.jpg" data-size="1870x1694">
&lt;img src="./p/jokura-web/image_2.jpg"
width="1870"
height="1694"
srcset="./p/jokura-web/image_2_hude9f6067a81827fd4bd0fcd91b7d098e_112991_480x0_resize_q75_box.jpg 480w, ./p/jokura-web/image_2_hude9f6067a81827fd4bd0fcd91b7d098e_112991_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="GCPの料金（N1 標準マシンタイプ）">
&lt;/a>
&lt;figcaption>GCPの料金（N1 標準マシンタイプ）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>サーバー管理者だった私は、連絡を受けるたび SSH 接続してサーバーを再起動していました。&lt;/p>
&lt;p>ですがここは、ぜひ技術の力で課題解決をしよう！ということで、Minecraftサーバーを誰でも簡単に制御できる、Webアプリケーションを作成することになりました。&lt;/p>
&lt;h2 id="まずは完成品をどうぞ">まずは完成品をどうぞ&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 56;
flex-basis: 134px"
>
&lt;a href="./p/jokura-web/image_3.jpg" data-size="750x1334">
&lt;img src="./p/jokura-web/image_3.jpg"
width="750"
height="1334"
srcset="./p/jokura-web/image_3_hu3e11a2584ac5d820d2c10170e24cb2af_83437_480x0_resize_q75_box.jpg 480w, ./p/jokura-web/image_3_hu3e11a2584ac5d820d2c10170e24cb2af_83437_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="トップページ（情クラ！）">
&lt;/a>
&lt;figcaption>トップページ（情クラ！）&lt;/figcaption>
&lt;/figure>&lt;figure
class="gallery-image"
style="
flex-grow: 56;
flex-basis: 134px"
>
&lt;a href="./p/jokura-web/image_4.jpg" data-size="750x1334">
&lt;img src="./p/jokura-web/image_4.jpg"
width="750"
height="1334"
srcset="./p/jokura-web/image_4_hu46471f196a2944efda5599a29a1186d9_60874_480x0_resize_q75_box.jpg 480w, ./p/jokura-web/image_4_hu46471f196a2944efda5599a29a1186d9_60874_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="サーバー状況確認ページ（情クラ！）">
&lt;/a>
&lt;figcaption>サーバー状況確認ページ（情クラ！）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>最初に実装したのは、「ホーム」のお知らせ（左）と「サーバー状況」の確認画面（右）です。
モバイルファーストのデザインですが、きちんとレスポンシブ対応させています。&lt;/p>
&lt;p>以下、それぞれの軽い機能紹介です。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ページ&lt;/th>
&lt;th>機能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ホーム&lt;/td>
&lt;td>プレイヤーが自由に建築報告を投稿することができます&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>サーバー状況&lt;/td>
&lt;td>サーバーの起動・停止状況やオンラインメンバーを確認できます&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="ここで少し技術的な話をしましょう">ここで、少し技術的な話をしましょう&lt;/h2>
&lt;p>一応そういうブログ（ ？）なので、今回 Minecraft サーバーと連携したノウハウについて記述しておきます。&lt;/p>
&lt;p>Minecraft サーバーでは、ある特定のパケットを受け取ると、現在のサーバーのステータスを返す機能が搭載されています。
&lt;a class="link" href="https://wiki.vg/Server_List_Ping" target="_blank" rel="noopener"
>こちらのページ&lt;/a>に詳しい仕様が載っています。
これらの仕様は、Minecraft 起動時のマルチプレイ選択画面などに利用されているそうです。&lt;/p>
&lt;p>続いて、詳しい仕様について順を追って説明していきます。&lt;/p>
&lt;p>まず、クライアント側が以下のような Handshake パケットを送信します。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Packet ID&lt;/th>
&lt;th>Field Name&lt;/th>
&lt;th>Field Type&lt;/th>
&lt;th>Notes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0x00&lt;/td>
&lt;td>Protocol Version&lt;/td>
&lt;td>VarInt&lt;/td>
&lt;td>See protocol version numbers. The version that the client plans on using to connect to the server (which is not important for the ping). If the client is pinging to determine what version to use, by convention -1 should be set.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>^&lt;/td>
&lt;td>Server Address&lt;/td>
&lt;td>String&lt;/td>
&lt;td>Hostname or IP, e.g. localhost or 127.0.0.1, that was used to connect. The Notchian server does not use this information. Note that SRV records are a complete redirect, e.g. if _minecraft._tcp.example.com points to mc.example.org, users connecting to example.com will provide mc.example.org as server address in addition to connecting to it.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>^&lt;/td>
&lt;td>Server Port&lt;/td>
&lt;td>Unsigned Short&lt;/td>
&lt;td>Default is 25565. The Notchian server does not use this information.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>^&lt;/td>
&lt;td>Next state&lt;/td>
&lt;td>VarInt&lt;/td>
&lt;td>Should be 1 for status, but could also be 2 for login.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>ここで重要なのが、このレスポンスを待たずに続けてリクエストパケットを送信します。
その応答パケットとして、サーバーが以下のようなJSONを返します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.16.1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;protocol&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">47&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;players&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;max&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;online&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;sample&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;minecraft_name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4566e69f-c907-48ee-8d71-d7ba5aa00d20&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Hello world&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;favicon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;data:image/png;base64,&amp;lt;data&amp;gt;&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このJSONを使って、サーバの各情報が取得できます。&lt;/p>
&lt;p>また、このパケットを送信するライブラリを探してみたところ、
&lt;a class="link" href="https://gist.github.com/csh/2480d14fbbb33b4bbae3" target="_blank" rel="noopener"
>C#&lt;/a>・
&lt;a class="link" href="https://gist.github.com/zh32/7190955" target="_blank" rel="noopener"
>Java&lt;/a>・
&lt;a class="link" href="https://gist.github.com/ewized/97814f57ac85af7128bf" target="_blank" rel="noopener"
>Python3&lt;/a>・
&lt;a class="link" href="https://github.com/xPaw/PHP-Minecraft-Query" target="_blank" rel="noopener"
>PHP&lt;/a>
用に作られたコードが見つかりました。
今回は、PHPライブラリを使用しました。&lt;/p>
&lt;h2 id="実装した機能">実装した機能&lt;/h2>
&lt;p>あまり技術的な話をすると長くなっちゃいそうなので、次に行きます。&lt;/p>
&lt;p>他に実装した機能も紹介します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 56;
flex-basis: 134px"
>
&lt;a href="./p/jokura-web/image_5.jpg" data-size="750x1334">
&lt;img src="./p/jokura-web/image_5.jpg"
width="750"
height="1334"
srcset="./p/jokura-web/image_5_hu33301e155b01a3f057182daf347c96c1_64778_480x0_resize_q75_box.jpg 480w, ./p/jokura-web/image_5_hu33301e155b01a3f057182daf347c96c1_64778_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="ナビゲーションバー（情クラ！）">
&lt;/a>
&lt;figcaption>ナビゲーションバー（情クラ！）&lt;/figcaption>
&lt;/figure>&lt;figure
class="gallery-image"
style="
flex-grow: 56;
flex-basis: 134px"
>
&lt;a href="./p/jokura-web/image_6.jpg" data-size="750x1334">
&lt;img src="./p/jokura-web/image_6.jpg"
width="750"
height="1334"
srcset="./p/jokura-web/image_6_hub0ca0884213067acf24efcc3d5d07526_54652_480x0_resize_q75_box.jpg 480w, ./p/jokura-web/image_6_hub0ca0884213067acf24efcc3d5d07526_54652_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="再起動（情クラ！）">
&lt;/a>
&lt;figcaption>再起動（情クラ！）&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ページ&lt;/th>
&lt;th>機能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ピクチャ&lt;/td>
&lt;td>プレイヤーが自由に画像を投稿することができます&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>オンラインユーザ&lt;/td>
&lt;td>ホワイトリストに登録されたプレイヤーが表示され、サーバーに入っているかどうかがわかります&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>起動・停止&lt;/td>
&lt;td>サーバーをしばらく利用しない場合は、GCP課金対策のためにサーバーを切ることができます&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>再起動&lt;/td>
&lt;td>Minecraft サーバーを再起動させることができます&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>バックアップ実行&lt;/td>
&lt;td>Minecraft サーバーのバックアップを作成します（毎日5:00に定期実行されます）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>バックアップ履歴&lt;/td>
&lt;td>バックアップ履歴の一覧を表示します&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>情クラマップ&lt;/td>
&lt;td>情クラワールドの建築物紹介が載っています&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>情クラ！公式アプリ&lt;/td>
&lt;td>公式アプリへのリンクです&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="みんなログインしよう">みんなログインしよう&lt;/h2>
&lt;p>今回サーバーのコントロール機能が Web に公開されるので、ログイン機能を実装する必要があります。
全員 Google アカウントを持っていたので、Firebase Authentication を使って Google ログインを実装しました。&lt;/p>
&lt;p>Firebase に関する記事はたくさんあると思うので、今回説明は省略します。&lt;/p>
&lt;p>以下の公式ドキュメントを読むとよくわかりますよ（雑）&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Firebase Authentication（Google）&lt;/strong> &lt;a class="link" href="https://firebase.google.com/docs/auth/web/start?hl=ja" target="_blank" rel="noopener"
>https://firebase.google.com/docs/auth/web/start?hl=ja&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="マイクラサーバーのバックエンドはどうなってるの">マイクラサーバーのバックエンドはどうなってるの？&lt;/h2>
&lt;p>Minecraft サーバーでは、Node.js + TypeScript でAPIを構築しています。&lt;/p>
&lt;p>たとえば、以下は Minecraft サーバーを起動するルーティングの一部抜粋です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="c1">// --- Start Server ------------------------------------------------------------
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">router&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/api/run/start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>: &lt;span class="kt">express.Request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>: &lt;span class="kt">express.Response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">schema&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Joi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kt">object&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">user&lt;/span>: &lt;span class="kt">Joi.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">required&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">validation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">schema&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">validate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">validation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;不正なリクエストを拒否しました&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;ユーザ固有IDが設定されていないリクエストが送信されました&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">400&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bad request&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">statusAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">startAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Success&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;failed due to run interval&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;起動コマンドを拒否しました&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;前回の処理の実行から&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WAIT_SECONDS_FROM_LAST_PROCESS&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;秒経過していないため、コマンドを拒否しました。&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nx">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;起動コマンドを拒否しました&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;サーバーが既に起動しているため、起動コマンドを拒否しました。サーバーとの同期ができていない恐れがあります。[Err: startAsync()]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">400&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bad request&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;起動コマンドを拒否しました&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;既に起動しているため、起動コマンドを拒否しました。サーバーとの同期ができていない恐れがあります。[Err: statusAsync()]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">400&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bad request&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="c1">// -----------------------------------------------------------------------------
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>まず、Joi という npm パッケージを利用して、送信されたクエリパラメータなどのバリデーションを行います。
そして、post( ) という関数がありますが、これはサーバーのエラーなどを Discord のサーバーに通知するための関数として用意してあります。
server.jar は screen 上で走らせているのですが、screen の二重起動にならないように初めに起動してもよいかのチェックも行っています。&lt;/p>
&lt;p>また、実行系はシェルにまとめてあります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">JARFILE&lt;/span>&lt;span class="o">=&lt;/span>/home/jokura_server/minecraft/server.jar
&lt;span class="nv">MEM&lt;/span>&lt;span class="o">=&lt;/span>15000M
&lt;span class="nb">cd&lt;/span> &lt;span class="sb">`&lt;/span>dirname &lt;span class="nv">$0&lt;/span>&lt;span class="sb">`&lt;/span>
screen -UAmdS minecraft java -server -Xms&lt;span class="si">${&lt;/span>&lt;span class="nv">MEM&lt;/span>&lt;span class="si">}&lt;/span> -Xmx&lt;span class="si">${&lt;/span>&lt;span class="nv">MEM&lt;/span>&lt;span class="si">}&lt;/span> -jar &lt;span class="si">${&lt;/span>&lt;span class="nv">JARFILE&lt;/span>&lt;span class="si">}&lt;/span> nogui
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記のファイルは、起動用のシェルです。&lt;/p>
&lt;p>他にも再起動用やバックアップ用などのシェルも用意してあります。（下記は 再起動用）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">WAIT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="nv">STARTSCRIPT&lt;/span>&lt;span class="o">=&lt;/span>/home/jokura_server/minecraft/start.sh
&lt;span class="nv">SCREEN_NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;minecraft&amp;#39;&lt;/span>
screen -p &lt;span class="m">0&lt;/span> -S &lt;span class="si">${&lt;/span>&lt;span class="nv">SCREEN_NAME&lt;/span>&lt;span class="si">}&lt;/span> -X &lt;span class="nb">eval&lt;/span> &lt;span class="s1">&amp;#39;stuff &amp;#34;say &amp;#39;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">WAIT&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;秒後にサーバーを再起動します\015&amp;#34;&amp;#39;&lt;/span>
screen -p &lt;span class="m">0&lt;/span> -S &lt;span class="si">${&lt;/span>&lt;span class="nv">SCREEN_NAME&lt;/span>&lt;span class="si">}&lt;/span> -X &lt;span class="nb">eval&lt;/span> &lt;span class="s1">&amp;#39;stuff &amp;#34;say すぐに再接続可能になるので、しばらくお待ち下さい\015&amp;#34;&amp;#39;&lt;/span>
sleep &lt;span class="nv">$WAIT&lt;/span>
screen -p &lt;span class="m">0&lt;/span> -S &lt;span class="si">${&lt;/span>&lt;span class="nv">SCREEN_NAME&lt;/span>&lt;span class="si">}&lt;/span> -X &lt;span class="nb">eval&lt;/span> &lt;span class="s1">&amp;#39;stuff &amp;#34;stop\015&amp;#34;&amp;#39;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> -n &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>screen -list &lt;span class="p">|&lt;/span> grep -o &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">SCREEN_NAME&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>
&lt;span class="k">do&lt;/span>
sleep &lt;span class="m">1&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="nv">$STARTSCRIPT&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="今現在の-情クラ">今現在の 情クラ！&lt;/h2>
&lt;p>今は残念ながら、Webサービスを終了しています。
（Minecraft の活動自体はしています！）&lt;/p>
&lt;p>2021年4月から、Minecraft サーバーを別のメンバーが自宅サーバーで建ててくれることになりました。
やはり GCP などの従量課金制のサーバーで運用するには、かなり気を使ってしまうので正直解放されました。&lt;/p>
&lt;p>かといって、情クラ！での活動はまだまだ続けていく予定なので、ぜひこのブログでも活動を共有していけたらなと思います！&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="./p/jokura-web/image_7.jpg" data-size="1920x1080">
&lt;img src="./p/jokura-web/image_7.jpg"
width="1920"
height="1080"
srcset="./p/jokura-web/image_7_huace687ff975c9ebcf26ac6a2a773413a_114939_480x0_resize_q75_box.jpg 480w, ./p/jokura-web/image_7_huace687ff975c9ebcf26ac6a2a773413a_114939_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="アクティブすぎるメンバーの写真">
&lt;/a>
&lt;figcaption>アクティブすぎるメンバーの写真&lt;/figcaption>
&lt;/figure>&lt;/p></description></item></channel></rss>