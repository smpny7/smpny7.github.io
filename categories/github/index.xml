<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub on コアラボ (coalabo.)</title><link>https://coalabo.net/categories/github/</link><description>Recent content in GitHub on コアラボ (coalabo.)</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 05 Jun 2021 22:00:00 +2100</lastBuildDate><atom:link href="https://coalabo.net/categories/github/index.xml" rel="self" type="application/rss+xml"/><item><title>誰にとってもわかりやすいコミットメッセージ</title><link>https://coalabo.net/p/commit-message/</link><pubDate>Sat, 05 Jun 2021 22:00:00 +2100</pubDate><guid>https://coalabo.net/p/commit-message/</guid><description>みんなコミットメッセージってどんなふうに書いてるのかな？ ふと気になって、さまざまなオープンソースのコミットメッセージをみてきました。
今まで自分が使ってきたコミットメッセージがあまりにも一般的じゃなかったので、ここで統一したいと思います！（覚え書き）
これまでのコミットメッセージの付け方 はじめて共同プロジェクトを立ち上げた時に、とあるネット上の人のコミットメッセージの書き方を真似て、マイルールとしていました。
大かっこ[]の中に Prefix を入れ（例：add fix hotfix など）、その後に日本語でコミットメッセージを記入するという形でしたが、 あまりこの書き方をしている人が多くなかったのです&amp;hellip;
[add] リアルタイムデータベースとの通信機能 もっとも多かった印象がある &amp;amp; かっこよかったもの Add: リアルタイムデータベースとの通信機能 やっぱこういう Prefix のつけ方がかっこいいですよね。
あと当たり前ですが、英語でのコミットメッセージが多かったので、個人開発は英語、友人との共同開発は日本語という感じに分けてもいいですね。
Prefix で代表的なもの add・update・upgrade・fix・hotfix などはよく聞きますが、どういった Prefix が共通認識としてよく使われているのでしょうか。
また、update と upgrade など、違いがよくわからないものも多いので、使う場合のシチュエーションも同時に調べてみたいと思います。
Prefix 使うシチュエーション Add: 機能やファイルなどの追加 Improve: コードの改善・リファクタリング Change: 仕様変更 Update: 機能修正（バグではない） Upgrade: バージョンアップ Disable: 機能の無効化（コメントアウト等） Rename: ファイル名を変更する Remove: ファイルを削除する Move: ファイルを移動する Fix: バグ修正 Hotfix: クリティカルなバグ修正 Revert: 変更取り消し 調べてみた結果、update と upgrade は上記のように分けている人もいれば、update　がバージョンアップとしている人もいました。 また、improve の代わりに clean を使う人も多かったですが、こちらはシチュエーションは同じなので問題にはならなそうです。 change と update もほぼ同じ印象を受けました。</description></item><item><title>Hugo + GitHub Pages + 独自ドメイン でサイトを構築する</title><link>https://coalabo.net/p/hugo/</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0900</pubDate><guid>https://coalabo.net/p/hugo/</guid><description>ブログを始めてみたい！ ブログを始めたいと思ったきっかけは、自分が作ったサービスが終了してしまうことでした。
せっかく作ったものが消えて日の目を浴びなくなるのは勿体ないので、 ブログという形で供養してやります！
なんかかっこいい方法でホスティングしたい 第一として、運用費用があまりかからないようにする必要があります。 なので、Nuxt.js を使って静的サイトを書き出し、GitHub Pages にデプロイしようかと考えていました。
ただ、フロントエンドやデザインのお仕事が続いており、自分でフロントを作成するのもなんだかなぁという状態でした。
とその時、知り合いからHugoを布教されました。なんとHugoにはテンプレートがたくさんあるじゃないですか！
Hugoは触ったことがなかったので、勉強がてら（といっても使い方の知見を得るだけですが）これを使ってブログを作成することにしました。
書き出しめっちゃ速い！！ 記事を Markdown で書いていくのですが、保存するたびホットリロードでブラウザに反映してくれます。
その速度が明らかに速いのです！（私が React や Nuxt.js などに慣れているからかもしれませんが&amp;hellip;）
書き出し速度がやばい！
Terminal 上に表示されている再レンダリング時間は 9ms とでていますね。
もう、一目惚れしました。
GitHub Pages にデプロイしよう すいません、タイトル詐欺です。 デプロイする前に1つすることがありました。
今回 Hugo Theme Stackというテーマパックを編集して使ったのですが、 これを submodule 登録しておきます。
$ git submodule add https://github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack また、git から clone する時は、submodule も忘れず引っ張ってくるようにしましょう。
$ git clone --recurse-submodules --depth 1 git@github.com:smpny7/coalabo.git GitHub Actions で自動化しよう 今度こそ、GitHub Actions で GitHub Pages に自動デプロイするように設定していきます。
今回 GitHub Pages 用に、&amp;lt;GitHub ユーザー名&amp;gt;.</description></item></channel></rss>