<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>覚え書き on コアラボ (coalabo.)</title><link>https://coalabo.net/tags/%E8%A6%9A%E3%81%88%E6%9B%B8%E3%81%8D/</link><description>Recent content in 覚え書き on コアラボ (coalabo.)</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Tue, 08 Jun 2021 13:00:00 +0900</lastBuildDate><atom:link href="https://coalabo.net/tags/%E8%A6%9A%E3%81%88%E6%9B%B8%E3%81%8D/index.xml" rel="self" type="application/rss+xml"/><item><title>発展的なGitコマンド特集</title><link>https://coalabo.net/p/github-rebase/</link><pubDate>Tue, 08 Jun 2021 13:00:00 +0900</pubDate><guid>https://coalabo.net/p/github-rebase/</guid><description>1. committer date を author date に設定する方法 コミットにはコミットの著者である author と、コミットを取り込んだ人を表す committer の2つの属性が存在していて、 それぞれ別のタイムスタンプ(author date と committer date)を持っています。
author date と committer dateを表示するには、以下のコマンドを入力します。
$ git log --pretty=fuller author date の日付を committer date に設定する場合は、以下のコマンドを実行します。
$ git rebase --root --committer-date-is-author-date &amp;lt;branch&amp;gt; committer date の日付を author date に設定する場合は、以下のコマンドを実行します。
$ git rebase --root --ignore-date &amp;lt;branch&amp;gt; 2. 過去のコミットメッセージを変更する $ git rebase -i --root を入力することで、すべてのコミットがvim上で表示されるので、修正したいコミット先頭の「pick」を「edit」に書き換えます。
3. 修正コミットを作成する まずは、修正を加えたいコミットのハッシュを調べましょう
$ git log --oneline そのハッシュに fixup でコミットをすることで、追加の修正を加えられます。
$ git commit --fixup &amp;lt;commit hash&amp;gt; さらに rebase で、fixup コミットを修正したいコミットと合体させます。</description></item><item><title>誰にとってもわかりやすいコミットメッセージ</title><link>https://coalabo.net/p/commit-message/</link><pubDate>Sat, 05 Jun 2021 22:00:00 +2100</pubDate><guid>https://coalabo.net/p/commit-message/</guid><description>みんなコミットメッセージってどんなふうに書いてるのかな？ ふと気になって、さまざまなオープンソースのコミットメッセージをみてきました。
今まで自分が使ってきたコミットメッセージがあまりにも一般的じゃなかったので、ここで統一したいと思います！（覚え書き）
これまでのコミットメッセージの付け方 はじめて共同プロジェクトを立ち上げた時に、とあるネット上の人のコミットメッセージの書き方を真似て、マイルールとしていました。
大かっこ[]の中に Prefix を入れ（例：add fix hotfix など）、その後に日本語でコミットメッセージを記入するという形でしたが、 あまりこの書き方をしている人が多くなかったのです&amp;hellip;
[add] リアルタイムデータベースとの通信機能 もっとも多かった印象がある &amp;amp; かっこよかったもの Add: リアルタイムデータベースとの通信機能 やっぱこういう Prefix のつけ方がかっこいいですよね。
あと当たり前ですが、英語でのコミットメッセージが多かったので、個人開発は英語、友人との共同開発は日本語という感じに分けてもいいですね。
Prefix で代表的なもの add・update・upgrade・fix・hotfix などはよく聞きますが、どういった Prefix が共通認識としてよく使われているのでしょうか。
また、update と upgrade など、違いがよくわからないものも多いので、使う場合のシチュエーションも同時に調べてみたいと思います。
Prefix 使うシチュエーション Add: 機能やファイルなどの追加 Improve: コードの改善・リファクタリング Change: 仕様変更 Update: 機能修正（バグではない） Upgrade: バージョンアップ Disable: 機能の無効化（コメントアウト等） Rename: ファイル名を変更する Remove: ファイルを削除する Move: ファイルを移動する Fix: バグ修正 Hotfix: クリティカルなバグ修正 Revert: 変更取り消し 調べてみた結果、update と upgrade は上記のように分けている人もいれば、update　がバージョンアップとしている人もいました。 また、improve の代わりに clean を使う人も多かったですが、こちらはシチュエーションは同じなので問題にはならなそうです。 change と update もほぼ同じ印象を受けました。</description></item></channel></rss>