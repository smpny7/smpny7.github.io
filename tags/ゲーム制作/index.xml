<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ゲーム制作 on コアラボ (coalabo.)</title><link>https://coalabo.net/tags/%E3%82%B2%E3%83%BC%E3%83%A0%E5%88%B6%E4%BD%9C/</link><description>Recent content in ゲーム制作 on コアラボ (coalabo.)</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sun, 19 Dec 2021 00:00:00 +2100</lastBuildDate><atom:link href="https://coalabo.net/tags/%E3%82%B2%E3%83%BC%E3%83%A0%E5%88%B6%E4%BD%9C/index.xml" rel="self" type="application/rss+xml"/><item><title>Unityでサウンド遅延を最低限に抑える ~CRI ADX2の導入とSonicSYNC~</title><link>https://coalabo.net/p/vivace-adx2/</link><pubDate>Sun, 19 Dec 2021 00:00:00 +2100</pubDate><guid>https://coalabo.net/p/vivace-adx2/</guid><description>ノーツタッチ時の遅延がなかなか改善できませんでした 改善前は、効果音はUnity標準のサウンドアセットを使用していました。この再生方式は、安定した音声を再生するために十分な量のデータをバッファに溜め込んでから出力しています。
これまでBufferingTimeを短くしたり、音声データの先頭余白をギリギリまでカットしたりすることで、体感上遅延が少なくなるように工夫してきましたが、ノーツが多く同時に効果音が再生される箇所では遅延が若干感じられました。
ノーツの少ない箇所（遅延が小さい） ノーツの多い箇所（遅延が大きい）
プロセカで使われている SonicSYNC 技術の解説動画を発見しました たまたまチャンネル登録していた CA.Developer チャンネルで、「プロジェクトセカイ」の音声再生の仕組みとSonicSYNCで変わったこと | CA.Unity#3 という動画が、5日ほど前に投稿されました。
「プロジェクトセカイ」の音声再生の仕組みとSonicSYNCで変わったこと | CA.Unity#3 https://www.youtube.com/watch?v=7ql4CNBehes
SonicSYNC とは、「スマートフォンでの音声再生遅延を限りなくゼロにする機能」で、ハードウェアと同期して即座に音声信号を生成することにより、ソフトウェア処理による再生遅延を限りなくゼロにできる技術です。音声処理が短時間で終わるように細かく分割し、音が必要になった時にすぐに準備して鳴らすという工程を繰り返すことで、これまでのようにバッファーに溜めておく必要がないため遅延が改善されます。
個人が無償で使えるADX2 LEというミドルウェア 本来であれば企業向けである ADX2 が有償で提供されているのですが、学生や個人が無償で使うことができる ADX2 LE というものがあります。（コンテンツの売り上げが1,000万円以内であることなど、一定の条件はあります。）今回 ADX2 LE を導入して、ノーツタッチ時の効果音の遅延を改善していきたいと思います。
必要な音声ファイルを生成する 今回の ADX2 では、音声ファイルを以下のものに変換する必要があります。
形式 説明 .acf 環境設定やACBファイルから参照されるキューシート共通の情報を格納する .acb キュー情報、再生パラメータ、メモリ再生用波形データをキューシート単位でパッキング .awb ストリーム再生用波形データをキューシート単位でパッキング（ストリームにする場合のみ、今回は使用しない） これらのファイルを生成するために、「CRI Atom Craft」というソフトウェアを使用します。
CRI Atom Craft https://game.</description></item><item><title>VIVACE（音ゲー）待望のアプリ化！</title><link>https://coalabo.net/p/vivace-asset-bundle/</link><pubDate>Thu, 19 Aug 2021 11:00:00 +2100</pubDate><guid>https://coalabo.net/p/vivace-asset-bundle/</guid><description>これは１年前のお話&amp;hellip; 学祭に向けて、昨年同級生と3人で音ゲーを作った話は過去に記事にしたと思います。
当日の朝4時まで Discord をつないでコーディングをし、学祭ギリギリでビルドして、エラーがないことも確認できました。
Discord の通話を切った後、悲劇は起こります 私: 「じゃぁもう4時半だし、PlayStore に APK ファイルをアップロードして、寝るか〜〜」
カチッ
カチッ
（ドラッグの音）
Google Play Store: 「エラー: APK ファイルのサイズを 100 MB まで小さくするか、APK 拡張ファイルを使用する必要があります。」
私: 「 ！！！！！！！！！」
そうです、この音ゲーアプリ、楽曲ファイルが原因で軽く100MBを超えちゃってるんです。
さすがに眠くて、Google Play Store でのリリースは諦めました。（当日は APK 配布）
今回は追加ダウンロード機能を実装して、アプリストアへのリリースまでやります！ 大体の音ゲーって、アプリサイズ縮小のために、起動後にコンテンツのダウンロードを行いますよね。
今回はそれを、AssetBundle と用意している API サーバを用いて実装していきます。
AssetBundle とは、アプリのビルド時に行っている処理を事前に行っておく事により、実行時に外部からアセットがロードできるようにしたものです。 これを Web サーバなどに置いておくことで、ダウンロードしてリソースを使用できるようになります。
AssetBundle の作成 今回は AssetBundleBrowser を使用します。これはプレリリース版ですので、使用は自己責任でお願いします。
AssetBundleBrowser (GitHub)　https://github.com/Unity-Technologies/AssetBundles-Browser
AssetBundleBrowser
使い方は簡単、このツールに AssetBundle にまとめたいものをドラッグします。 今回だと、音源とプレビュー用の音源、各難易度の譜面とアートワークをセットし、 Build タブに移動します。
AssetBundleBrowser (Build)</description></item><item><title>学祭2020向け音ゲーの制作: VIVACE</title><link>https://coalabo.net/p/vivace/</link><pubDate>Mon, 12 Jul 2021 02:00:00 +2100</pubDate><guid>https://coalabo.net/p/vivace/</guid><description>学祭で何か展示したい！ その当時、新しいジャンルのものに挑戦したい！とずっと考えており、Unity に挑戦することにしました。
同級生のエンジニア 3名で作ったのですが、制作物は 3人とも大好きな「音ゲー」にしました。
こんな感じの音ゲーを制作しました（ネタバレ）↓
スプラッシュ画面 プレイ画面
タイトル決定 まず初めに考えたのは、仕様でもデザインでもなくタイトルでした。
タイトルは、「VIVACE」（ヴィヴァーチェ）です！ 速度記号で、「活発に」という意味があるそうです。
デザイン作成！ デザインを作成するのが一番好きかもしれません（おい）
最近はデザインを作成するだけで満足感を得ることができるようになりました。
デザイン作成
とりあえず、最低限遊べるコードを実装します 本来であればタッチで遊べる仕様ですが、とりあえずキーボードでノーツを叩けるようにします。
中央から順に、Perfect・Great・Good の3つの Box Collider を設置し、 ノーツ落下時の onTriggerEnter と onTriggerExit の2つで判定を検知します。
イメージ画像
Rider画面
スコアに関しては、共同開発したメンバーが区分求積法での加算を実装してくれました（天才）
ん&amp;hellip; 区分求積法ってなんだっけ？
これです！高校数学で習いましたね！（私は gg った）
区分求積法
ノーツの読み込み仕様を決定 とりあえず、CSV形式（カンマ区切り）で譜面を制作することにしました！
こんな感じ ↓
1.6901408450704225,1 1.6901408450704225,3 2.007042253521127,2 2.323943661971831,3 2.535211267605634,2 2.535211267605634,4 2.9577464788732395,2 2.9577464788732395,4 3.591549295774648,3 3.8028169014084505,2 4.014084507042254,1 4.225352112676056,0 ... ノーツタッチの時刻と、それに対応するレーン（0〜4）番号を保存しています。
また、これを生成するツールも Python で実装しました！</description></item></channel></rss>