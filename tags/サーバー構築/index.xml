<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>サーバー構築 on コアラボ (coalabo.)</title><link>https://coalabo.net/tags/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E6%A7%8B%E7%AF%89/</link><description>Recent content in サーバー構築 on コアラボ (coalabo.)</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Tue, 01 Jun 2021 00:00:00 +2100</lastBuildDate><atom:link href="https://coalabo.net/tags/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E6%A7%8B%E7%AF%89/index.xml" rel="self" type="application/rss+xml"/><item><title>鯖管向け！Minecraftサーバーの監視ツールの制作</title><link>https://coalabo.net/p/minecraft-server-monitor/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +2100</pubDate><guid>https://coalabo.net/p/minecraft-server-monitor/</guid><description>今回の Firebase は一味違います 今回作成する監視サーバですが、Google Cloud Platform の Cloud Scheduler を使って、Firebase の Cloud Functions を定期実行させます。
Cloud Scheduler と Cloud Functions の連携方法ですが、 Google が用意してある firebase-functions というライブラリに付随しているスケジュール機能を使用することで、 自動で GCP の Cloud Scheduler に登録されます。
天下のGoogle様様 Firebase で定期実行って、かなり金銭的なコストがかかりそうですよね。
Web サーバーなどとは違い、時間指定のあるジョブ（ Worker ）になるので、 結構ホスティングサービスも少ないですし、今回作成する監視サーバーは10分毎に定期実行します。
ですが、Cloud Functions では月200万回までの呼び出しは無料です！！
具体的に、関数の呼び出しの課金は以下の通りです。
月間呼び出し回数 料金（100 万回あたり） 最初の 200 万回 無料 200 万回を超えた分 $0.40 今回は、かなり複雑なDBの整形ジョブやWebサービスのCRONジョブをするわけではないので、無料枠で十分です。
ただし気をつけないといけないのが、関数のデプロイには料金がかかります。
まず、関数は無料枠のない Container Registry に保存されるため、デプロイ後にわずかな料金が発生します。 Container Registry のストレージ費用は、1 GB あたり月額約 $0.</description></item><item><title>Minecraftサーバーのリモート制御サイトを制作したお話（情クラ！）</title><link>https://coalabo.net/p/jokura-web/</link><pubDate>Thu, 22 Apr 2021 09:06:44 +0900</pubDate><guid>https://coalabo.net/p/jokura-web/</guid><description>Minecraft っていいよね Minecraft って、複数人でプレイすると沼ですよね。
「 情クラ！」という、知り合い十数名程度の Minecraft サーバーで遊んでいるのですが、 今や大陸内には高速道路が広がり、複数の大陸間には大きな橋が建築されています。（やばすぎ）
瀬戸大橋（こんなのが 5, 6本架かっています）
ある日、Minecraft のサーバー管理者になった 最初はみんなで家に集まって、ローカルでサーバーを建ててプレイしていました。 しかしプレイヤーがどんどん増えてきたため、Google Cloud Platform（GCP）でサーバーを立てることにしました。
これが、「情クラ！」という Minecraft サーバーの誕生のきっかけです。
いつどこでも Minecraft サーバーで遊べる環境が完成し、ワールドの発展度合いが加速度的に大きくなったのですが、 しかし1つ大きな問題がでてきました。
これは、Google Cloud Platform（GCP）がまだ365日無料トライアルだった頃の話なのですが、 当時GCPには、年間 30,000円分の無料クレジットが付属していました。 それをちょうど1年間で使い切るn1-standard-1 プラン（仮想 CPU 数: 1, メモリ: 3.75 GB）で運用していたのですが、 大人数が長時間プレイしていると動作がもっさりしてくるのです。
GCPの料金（N1 標準マシンタイプ）
サーバー管理者だった私は、連絡を受けるたび SSH 接続してサーバーを再起動していました。
ですがここは、ぜひ技術の力で課題解決をしよう！ということで、Minecraftサーバーを誰でも簡単に制御できる、Webアプリケーションを作成することになりました。
まずは完成品をどうぞ トップページ（情クラ！） サーバー状況確認ページ（情クラ！）
最初に実装したのは、「ホーム」のお知らせ（左）と「サーバー状況」の確認画面（右）です。 モバイルファーストのデザインですが、きちんとレスポンシブ対応させています。
以下、それぞれの軽い機能紹介です。
ページ 機能 ホーム プレイヤーが自由に建築報告を投稿することができます サーバー状況 サーバーの起動・停止状況やオンラインメンバーを確認できます ここで、少し技術的な話をしましょう 一応そういうブログ（ ？）なので、今回 Minecraft サーバーと連携したノウハウについて記述しておきます。</description></item></channel></rss>