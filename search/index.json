[{"content":"だってお風呂で音楽聴きたいもん\u0026hellip; こちらの iPhoneXS、毎日お風呂で使ってたんですが水没しちゃいました。\n 水没したiPhoneXS（クリックで再生） \niPhoneXS は 2018 年に発売され、IEC規格60529に基づくIP68等級に適合しているそうです。 どのくらいかというと、最大水深2メートルで最大30分間使用できるらしい。。\n毎日お風呂で壁に立てかけて音楽を聴いてたんですが（風呂に携帯持ち込むなと、友人にめちゃめちゃ怒られました）、突然ディスプレイがちらつき始めたのです。\n 先ほどの映像から1時間後のiPhoneXS \nん、まだ息はある\u0026hellip;？ とりあえず iPhone を完全に放置し、内部が乾燥したであろう2日後に、おそるおそる Mac に接続。\nすると、なんと反応があるではないですか！もしかして壊れていたのはディスプレイだけ\u0026hellip;？\nとりあえず急いでバックアップをとり、密林に行って交換用ディスプレイを購入することにしました。\n 購入したもの　https://www.amazon.co.jp/gp/product/B08RYRPJGK/ref=ppx_yo_dt_b_asin_title_o06_s01\n 届きました！修理開始です  有機ELディスプレイ \nディスプレイが届きました！めちゃめちゃ綺麗な箱に入って届いて、若干テンションが上がりました(笑)\n今回のキットにはドライバー3本とピンセット、ヘラ、吸盤、開口ツールなどの工具に加え、防水フレームステッカー（大切）とおまけのガラスフィルムもついてきました。 写真はは左から順に、星型ドライバー、十字型ドライバー、Y字型ドライバーです。\n 今回のキットの付属品 \nまずはおしりのネジ2つを外していきます。YouTube で分解動画などがよくありますが、皆さん簡単そうに回していますが一番ここが難しかったです。 少しでも力を抜くと、すぐにネジがなめてしまうので注意しましょう。\n こちらは星型ネジです \nあとは大体想像つくかと思いますが、ドライヤーでシールの粘着力を弱めていきます。 そして吸盤で引っ張り、隙間を作って開いていきます。\nお風呂で使っていたため、湿気などで防水フレームのシールが朽ちているかなと思っていましたが、予想通りでした。 ゴムが水分で、画像のように粉々になっていました。（あとで綺麗に除去しておきました。） 交換用の防水フレームシールが入っていてよかったです！\n本体正面から見て右側にケーブルがあるので、あまり深くヘラを差し込まないようにしましょう。\n どんどん隙間を作って開いていきます \nようやくご対面です（一苦労）  iPhoneXSの中身 \nここから、まずバッテリーに接続されているケーブルを外し、その後ディスプレイにつながるケーブル3本を外します。\nケーブルが接続されているところにはカバーがついているのですが、ここをネジで外します。 驚いたのはネジの高さ（深さ？）で、1~2mm くらいしかありませんでした。 さすが Apple 製品、コンパクトな作りです。（紛失注意）\n ケーブルカバー部 \nこちらがカバーを外した画像です。\n ケーブルカバーを外した様子 \nまずはバッテリーの接続をはずし、通電するといけないので端子をセロハンテープ等で巻いておきます。\nそして、てこの原理をつかってディスプレイのケーブルコネクタを解除します。\n 端子を外しました！ \nこれで iPhone の 2枚おろしの完成です！\n さばかれたiPhone \n新しいディスプレイに FaceID 部分を移植します ここが一番緊張しました。\n上部のカメラ部分を新しいディスプレイに移すのですが、あまりネジで強く締めすぎるとディスプレイが割れてしまうので、慎重に作業を行います。\n 新旧ディスプレイ、右が新品です \nあとは逆の手順でもとに戻していきます 組み立ては端子を挿すだけでいいので、簡単でした。\n蓋を閉じる前に、動作確認をしておきます！\n 復元完了！電源は入るのか…？ \nついた 無事電源が入りました！！！\nもう一度電源を切って、蓋を閉めておきます。 耐水性がなくなってしまうので、付属したフレームステッカーを貼るのを忘れないようにしましょう。\n閉めるときに、おしりのネジを片方なめてしまったことは内緒です。\n Hello \n交換ディスプレイのレビュー 今回購入したディスプレイのレビュー欄には、3D Touch の感度が悪いとありました。\n私が試した感じだと、やはり 3D Touch は押し込んでも反応しないことが8割くらいあります。\n現在2ヶ月くらい利用していますが、ディスプレイ自体はきちんと使用できています。ただ、気づいた点もいくつかあるのでまとめておきます。\n 正規品じゃないので、True Tone 機能が使えなかった。 3D Touch は 1秒くらい長押ししてから押し込むと反応する。 ディスプレイの下部のカーブが正規品と異なる。（角の表示範囲が若干異なる）  ただ、この iPhone XS のゴールドの色や形は気に入っているので、これからも修理しながら大切に使っていこうと思います！\n追伸：お風呂用の防水 Bluetooth スピーカーを購入しました。\n","date":"2021-08-12T00:00:00+19:00","image":"https://coalabo.net/p/iphone-display-replacement/cover_hu0bc71ae7266c1b718b059ce0ee2d6380_177215_120x120_fill_q75_box_smart1.jpg","permalink":"https://coalabo.net/p/iphone-display-replacement/","title":"iPhoneXSのディスプレイを交換する"},{"content":"学祭で何か展示したい！ その当時、新しいジャンルのものに挑戦したい！とずっと考えており、Unity に挑戦することにしました。\n同級生のエンジニア 3名で作ったのですが、制作物は 3人とも大好きな「音ゲー」にしました。\nこんな感じの音ゲーを制作しました（ネタバレ）↓\n スプラッシュ画面   プレイ画面 \nタイトル決定 まず初めに考えたのは、仕様でもデザインでもなくタイトルでした。\nタイトルは、「VIVACE」（ヴィヴァーチェ）です！ 速度記号で、「活発に」という意味があるそうです。\nデザイン作成！ デザインを作成するのが一番好きかもしれません（おい）\n最近はデザインを作成するだけで満足感を得ることができるようになりました。\n デザイン作成 \nとりあえず、最低限遊べるコードを実装します 本来であればタッチで遊べる仕様ですが、とりあえずキーボードでノーツを叩けるようにします。\n中央から順に、Perfect・Great・Good の3つの Box Collider を設置し、 ノーツ落下時の onTriggerEnter と onTriggerExit の2つで判定を検知します。\n イメージ画像 \n Rider画面 \nスコアに関しては、共同開発したメンバーが区分求積法での加算を実装してくれました（天才）\nん\u0026hellip; 区分求積法ってなんだっけ？\nこれです！高校数学で習いましたね！（私は gg った）\n 区分求積法 \nノーツの読み込み仕様を決定 とりあえず、CSV形式（カンマ区切り）で譜面を制作することにしました！\nこんな感じ ↓\n1.6901408450704225,1 1.6901408450704225,3 2.007042253521127,2 2.323943661971831,3 2.535211267605634,2 2.535211267605634,4 2.9577464788732395,2 2.9577464788732395,4 3.591549295774648,3 3.8028169014084505,2 4.014084507042254,1 4.225352112676056,0 ... ノーツタッチの時刻と、それに対応するレーン（0〜4）番号を保存しています。\nまた、これを生成するツールも Python で実装しました！\n Notes Maker \n詳しくはこちら ↓\n notes-maker（GitHub） https://github.com/smpny7/notes-maker\n さて、次は楽しい楽しいバックエンド VIVACE には、「ランキングボード」という機能があり、各曲上位スコア10名の名前とスコアがクリア時に掲載されます。\n クリア画面（サンプル） \n鬼譜面ばかりなので、スコアが80万点にすら乗らない曲ばかりですが\u0026hellip;（もはや人間業ではありません）\nまぁ1~10位が全部100万点とかにならないので、いい感じにランキングボードが機能しているなという感じです。\n少し脱線しましたが、プレイヤーのクリア履歴は全部サーバーのDBに保管されており、 ユーザーの認証やデータの別端末への引き継ぎ、スコアの格納などはバックエンドのAPIで行っています。\nとりあえず、何で作ろう\u0026hellip;？\nと熟考し、最終的に私の大好きな Express で作ることにしました。 具体的にはNode.js + Typescript + Express で作成しています。\nサーバーは GCP の無料枠で、Docker 環境で今もなお動かしています。\n詳しくはこちら ↓\n vivace-api（GitHub） https://github.com/smpny7/vivace-api\n 共同作業の始まりだ！ ここからプロジェクトを GitHub Organizations のリポジトリに移植し、 共同開発がしやすいようにセットアップしました。（こちら）\nコーディングは基本メンバーの3人で行い、譜面の作成は、基本他の部員に手伝ってもらいました。（結果 → 鬼譜面）\nあまりもう覚えてないですが、曲選択機能やノーツ落下速度・タイミング調整機能、 プレイ時のエフェクトやサウンドなどを2ヶ月くらいかけて極めていきました。\n学祭当日の朝4:00まで、みんなで徹夜でバグ修正していたのは秘密です（楽しかった）\n学祭終了後 3人で話し合い、このソースコードは、バックエンド・譜面生成ツールも含めオープンソース化しようということになりました。\n海外の人がフォークしてくれてたのには少し驚きましたが、自分達でも楽曲DL機能・GooglePlayログイン機能など、 少しずつですが、さまざまなアップデートを加えていってます。\n鬼譜面ですが、史上最強の音ゲーだと思います！\n最後に この音ゲーを制作した経緯として、もう1つの理由があります。\nサークルの後輩たち（DTM してる人が多いです。）が、コミケに向けて曲をたくさん作っていました。 しかし、コロナ化の影響で中止となり、アウトプットする場がなくなってしまったこともあり、 同級生3人でその曲を使った音ゲーを作り、1つの製作物にしようということになりました。\nエンジニアの3人以外にも、楽曲製作班、譜面製作班など、コロナ禍の学祭で、 ここまで団結してオンラインで出し物を準備することができるとは思わなかったので、 忘れられない貴重な体験になりました。\n制作に協力していただいた皆様、本当にありがとうございました。\n","date":"2021-07-12T02:00:00+21:00","image":"https://coalabo.net/p/vivace/cover_hud5546a21fdb7b23d24fd1a26ba364382_211510_120x120_fill_q75_box_smart1.jpg","permalink":"https://coalabo.net/p/vivace/","title":"学祭2020向け音ゲーの制作: VIVACE"},{"content":"みんなコミットメッセージってどんなふうに書いてるのかな？ ふと気になって、さまざまなオープンソースのコミットメッセージをみてきました。\n今まで自分が使ってきたコミットメッセージがあまりにも一般的じゃなかったので、ここで統一したいと思います！（覚え書き）\nこれまでのコミットメッセージの付け方 はじめて共同プロジェクトを立ち上げた時に、とあるネット上の人のコミットメッセージの書き方を真似て、マイルールとしていました。\n大かっこ[]の中に Prefix を入れ（例：add fix hotfix など）、その後に日本語でコミットメッセージを記入するという形でしたが、 あまりこの書き方をしている人が多くなかったのです\u0026hellip;\n[add] リアルタイムデータベースとの通信機能 もっとも多かった印象がある \u0026amp; かっこよかったもの Add: リアルタイムデータベースとの通信機能 やっぱこういう Prefix のつけ方がかっこいいですよね。\nあと当たり前ですが、英語でのコミットメッセージが多かったので、個人開発は英語、友人との共同開発は日本語という感じに分けてもいいですね。\nPrefix で代表的なもの add・update・upgrade・fix・hotfix などはよく聞きますが、どういった Prefix が共通認識としてよく使われているのでしょうか。\nまた、update と upgrade など、違いがよくわからないものも多いので、使う場合のシチュエーションも同時に調べてみたいと思います。\n   Prefix 使うシチュエーション     Add: 機能やファイルなどの追加   Improve: コードの改善・リファクタリング   Change: 仕様変更   Update: 機能修正（バグではない）   Upgrade: バージョンアップ   Disable: 機能の無効化（コメントアウト等）   Rename: ファイル名を変更する   Remove: ファイルを削除する   Move: ファイルを移動する   Fix: バグ修正   Hotfix: クリティカルなバグ修正   Revert: 変更取り消し    調べてみた結果、update と upgrade は上記のように分けている人もいれば、update　がバージョンアップとしている人もいました。 また、improve の代わりに clean を使う人も多かったですが、こちらはシチュエーションは同じなので問題にはならなそうです。 change と update もほぼ同じ印象を受けました。\n上の表の中では、update は二重の捉え方があるので、使うときは気にかけておく方がよさそうですね。。\nでは、自分なりの Prefix 表を作ってみよう 上記でさまざまな Prefix を洗い出してみて、その問題点を踏まえた上で、誰にとってもわかりやすい Prefix を自分で決めておきたいと思います。\nまた、Rename や Move などはあまりよく使った記憶がないので、今回表からは外しておきます。 （スタートアップなどの経験が多く、長期的なメンテナンス経験をあまりしてこなかったのも原因かも\u0026hellip;）\n   Prefix 使うシチュエーション     Add: 機能やファイルなどの追加   Clean: コードの改善・リファクタリング   Change: 仕様変更   Upgrade: バージョンアップ   Disable: 機能の無効化（コメントアウト等）   Fix: バグ修正   Hotfix: クリティカルなバグ修正    曖昧な update という Prefix は今回避け、improve も若干 update と被る気がしたので、 完全にリファクタリング（仕様はそのままでコードをすっきりさせる）という意味がはっきりと伝わるように clean に変更しました。\nこの最小編成でとりあえずは立ち回ろうと思います！\nコミットメッセージって1行しか対応していないと思ってました コミットメッセージって、みなさん複数行で書くんですね。 コミットメッセージ内に Enter って入れられないものだと思ってました(笑)\nコミットメッセージは、Subject ・ Body ・ Footer という形で書くらしいです。\n         Subject そのコミットで何をしたのかをまとめた短い文章   Body 追加や修正が必要だった理由など   Footer Issue の ID やタイトル    1行目に Subject、2行目に空行で、3行目に内容を書きます。 1行目の Subject に書く内容は72文字以上は省略されるので、72文字以内が良さそうです。\nイメージとしては以下の書き方です。\nAdd: リアルタイムデータベースとの通信機能 Firebase を使ってランキングを保存できるようにしました。 ...（略）... #103 Issue のタイトル また、Body と Footer は分けず、以下のようにしているものもありました。\nAdd: リアルタイムデータベースとの通信機能 refs #103 Firebase を使ってランキングを保存できるようにしました。 ...（略）... ですが、個人で開発するプロジェクトに関しては、ここまでしなくても内容はわかるかなとも思います。\nそれぞれの案件に応じて臨機応変に対応する どれだけの人数でプロジェクトを進めていくのか、どのくらい長期的にメンテナンスしていくのかによって、 コミットメッセージのクオリティを変えていくのがベストプラクティスかなと思います。\n","date":"2021-06-05T22:00:00+21:00","image":"https://coalabo.net/p/commit-message/cover_hue4284ab73e487a9951f506861ac54474_531710_120x120_fill_q75_box_smart1.jpg","permalink":"https://coalabo.net/p/commit-message/","title":"誰にとってもわかりやすいコミットメッセージ"},{"content":"今回の Firebase は一味違います 今回作成する監視サーバですが、Google Cloud Platform の Cloud Scheduler を使って、Firebase の Cloud Functions を定期実行させます。\nCloud Scheduler と Cloud Functions の連携方法ですが、 Google が用意してある firebase-functions というライブラリに付随しているスケジュール機能を使用することで、 自動で GCP の Cloud Scheduler に登録されます。\n天下のGoogle様様 Firebase で定期実行って、かなり金銭的なコストがかかりそうですよね。\nWeb サーバーなどとは違い、時間指定のあるジョブ（ Worker ）になるので、 結構ホスティングサービスも少ないですし、今回作成する監視サーバーは10分毎に定期実行します。\nですが、Cloud Functions では月200万回までの呼び出しは無料です！！\n具体的に、関数の呼び出しの課金は以下の通りです。\n   月間呼び出し回数 料金（100 万回あたり）     最初の 200 万回 無料   200 万回を超えた分 $0.40    今回は、かなり複雑なDBの整形ジョブやWebサービスのCRONジョブをするわけではないので、無料枠で十分です。\nただし気をつけないといけないのが、関数のデプロイには料金がかかります。\nまず、関数は無料枠のない Container Registry に保存されるため、デプロイ後にわずかな料金が発生します。 Container Registry のストレージ費用は、1 GB あたり月額約 $0.026 です。\nそして、関数のデプロイごとに約 1 分の Cloud Build による処理が行われます。 料金は $0.003/ビルド分 ですが、1 日あたり最初の 120 ビルド分は無料です。\nはい、もうほとんど無料ですね。\nFirebase の料金プランは、Spark → Blaze にアップグレードしておく必要があります。 また、有効な支払い方法を登録しておく必要があります。\n Firebase 料金プラン \nCloud Functions プロジェクトの作成 Cloud Functions にデプロイするには、Firebase CLI を導入する必要があります。\n$ npm install -g firebase-tools お使いの Google アカウントでログインしておく必要があります。\n$ firebase login 最後に、プロジェクトを新規作成するには\n$ firebase init で新規プロジェクトを作成できます。が\u0026hellip;\nfirebase init でハマった！ firebase init を実行すると、なにやら不穏なメッセージが出ます。\n Error: Cloud resource location is not set for this project but the operation you are attempting to perform in Cloud Firestore requires it. Please see this documentation for more details: https://firebase.google.com/docs/projects/locations .\n 新規 Firebase プロジェクトを利用する際には、初めにリージョンを設定しておかないといけないそうです！\n デフォルトの GCP リソースロケーション を設定 \nGCP リソースロケーションについては、以下の通りです。一度設定すると変更することができないので注意です！\n   リージョン名（Tier 1） 地域     us-central1 アイオワ   us-east1 サウスカロライナ   us-east4 北バージニア   europe-west1 ベルギー   europe-west2 ロンドン   asia-east2 香港   asia-northeast1 東京   asia-northeast2 大阪    無難に、asia-northeast1 か asia-northeast2 あたりがいいと思います。\nこれできちんと新規プロジェクトの作成ができました！\n Firebase プロジェクトの新規作成 \nCloud Functions の環境変数について Cloud Functions には、環境変数を設定できるのですが、.env ファイルではありません。 firebaseプロジェクト内に、オブジェクト形式で保存されていきます。\n例えば今回のプロジェクトでは、address と port という環境変数が必要になるのですが、\n$ firebase functions:config:set server.address=\u0026#34;minecraft-sample-server.com\u0026#34; server.port=\u0026#34;25565\u0026#34; 上記のコマンドで、環境変数を設定できます。\nプロジェクトの環境構成に現在保存されているものを調べるには、\n$ firebase functions:config:get で、JSON が出力されます。\n環境変数をローカルエミュレート時に使えるようにする Cloud Functions の環境変数を、ローカルエミュレート時にも使うことは多いと思います。\n調べてみたところ、.runtimeconfig.json というファイルに環境変数の JSON を出力して functions ディレクトリ直下に置いておくことで、ローカルでも環境変数を取り込むことができるそうです。\n$ firebase functions:config:get \u0026gt; .runtimeconfig.json 今回作成したもの Minecraft サーバーを監視し、サーバーが落ちた際に Discord に通知してくれるサービス（Worker）を作成しました。\n詳しくは以下の GitHub リポジトリを参照してください！\n minecraft-server-monitor (README) \n minecraft-server-monitor　Monitor your Minecraft server and let Discord know the status 🖥\n Discord の 情クラ (minecraftサーバー) チャンネル Discord にサーバの状態をログとして投げてくれます。\nボットの名前とアイコンは、メンバーに勝手に変えられているので気にしないでください。。\n 一般的なログ \nまた、GCP の minecraft サーバーが落ちたときは、通知用チャンネルに投稿されます。\n サーバーが落ちた時のログ \nおわりに Firebase は最高ですね！\n","date":"2021-06-01T00:00:00+21:00","image":"https://coalabo.net/p/minecraft-server-monitor/cover_hu9bc544d4ea982a63781cc58d28f20ef3_17688_120x120_fill_q75_box_smart1.jpg","permalink":"https://coalabo.net/p/minecraft-server-monitor/","title":"鯖管向け！Minecraftサーバーの監視ツールの制作"},{"content":"ブログを始めてみたい！ ブログを始めたいと思ったきっかけは、自分が作ったサービスが終了してしまうことでした。\nせっかく作ったものが消えて日の目を浴びなくなるのは勿体ないので、 ブログという形で供養してやります！\nなんかかっこいい方法でホスティングしたい 第一として、運用費用があまりかからないようにする必要があります。 なので、Nuxt.js を使って静的サイトを書き出し、GitHub Pages にデプロイしようかと考えていました。\nただ、フロントエンドやデザインのお仕事が続いており、自分でフロントを作成するのもなんだかなぁという状態でした。\nとその時、知り合いからHugoを布教されました。なんとHugoにはテンプレートがたくさんあるじゃないですか！\nHugoは触ったことがなかったので、勉強がてら（といっても使い方の知見を得るだけですが）これを使ってブログを作成することにしました。\n書き出しめっちゃ速い！！ 記事を Markdown で書いていくのですが、保存するたびホットリロードでブラウザに反映してくれます。\nその速度が明らかに速いのです！（私が React や Nuxt.js などに慣れているからかもしれませんが\u0026hellip;）\n 書き出し速度がやばい！ \nTerminal 上に表示されている再レンダリング時間は 9ms とでていますね。\nもう、一目惚れしました。\nGitHub Pages にデプロイしよう すいません、タイトル詐欺です。 デプロイする前に1つすることがありました。\n今回 Hugo Theme Stackというテーマパックを編集して使ったのですが、 これを submodule 登録しておきます。\n$ git submodule add https://github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack また、git から clone する時は、submodule も忘れず引っ張ってくるようにしましょう。\n$ git clone --recurse-submodules --depth 1 git@github.com:smpny7/coalabo.git GitHub Actions で自動化しよう 今度こそ、GitHub Actions で GitHub Pages に自動デプロイするように設定していきます。\n今回 GitHub Pages 用に、\u0026lt;GitHub ユーザー名\u0026gt;.github.io のリポジトリを作成しました。 なぜそうしたかというと、https://\u0026lt;GitHub ユーザー名\u0026gt;.github.io でそのサイトが閲覧できるようになるからです。\nドメイン後にパスが続かないのは、カスタムドメインを設定する際に大切です。\nGitHub Actions には GitHub Pages action というのが マーケットプレイスに公開されていたので、これを参考に作成しました。\nname:github pageson:push:branches:- main # Set a branch name to trigger deploymentjobs:deploy:runs-on:ubuntu-18.04steps:- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.78.2\u0026#39;- name:Buildrun:hugo --minify# - name: Deploy# uses: peaceiris/actions-gh-pages@v3# with:# github_token: ${{ secrets.GITHUB_TOKEN }}# publish_dir: ./public- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}external_repository:smpny7/smpny7.github.iopublish_branch:maincname:coalabo.netsubmodule を一緒に引っ張ってくるのも、忘れないように設定しましょう。\nそして GitHub の Secrets に、ACTIONS_DEPLOY_KEY という名前で SSH のプライベートキーを設定しておきます。\nドメインが 35円だと！？ 本当にたまたまです。.com ドメインや .net ドメインが 35円セールしてました。\n お名前.com（2021/4/28 執筆時点） \nドメイン移管が安くなるのはしょっちゅう見てましたが、ドメイン自体が安くなっているのを見たのは初めてでした！\nサイト名に迷走して、3つくらいドメインをとってしまったのは秘密です。\n取得したドメイン名に設定しよう お名前.com の管理画面に行き、DNS 設定 \u0026gt; DNSレコード設定を利用する を選択します。\n DNS 設定画面（お名前.com） \nAレコードに、GitHub Pages のアドレスを入力します。\n DNS 設定（お名前.com） \n本来は、CNAMEレコードに github.io のドメインを登録するのが良いのですが、 私の場合うまく動かなかったので Aレコードで登録しました。\nGitHub Pages の仕様変更によって、グローバルIPアドレスが変わる恐れもあるので、その辺りは今後の検討課題です。\nGoogle Search Console を登録する Google Search Console とは、検索順位やサイト内のエラーを取得してくれる Google のサービスです。 通称 Googleサチコです。\n今回登録するにあたり、サイト所有確認なのですが、ドメイン認証にしようと思っているのでここで設定してしまいましょう。\n先程のレコード登録画面で、レコードを TXTに、VALUEをサチコで表示されたコードに設定します。\n 諸説ありますが、最後の「転送用のネームサーバーに変更する」は一応チェックを外しておきましょう。\n GitHub Actions を設定 構築も終盤にさしかかってきました。\nGitHub Pages 設定の Custom domain 項目に、使用したいドメインを入力します。\n GitHub Pages 設定画面 \nSave を押すと、ドメインが github.io に転送されるかのチェックが行われます。\n GitHub Pages 設定画面 \n確認されたら Enforce HTTPS が選択できるようになるので、チェックを入れておきましょう。\nでたな gtag.js（定期） Google Analytics が最近変更になったらしく、昔は UA-XXXXXX-X というタグだったのですが、 今は Gタグと呼ばれる G-XXXXXXX というものに変更されています。\nこれに伴い、JavaScript 部分も変更になるので、使用していたテーマパックの Google Analytics が正常に動きませんでした。\n私の使用しているテーマパックでは以下のように対応しました。\n layouts \u0026gt; partials \u0026gt; head \u0026gt; custom.html というファイルを作成すると、そこに記述されたコードがサイトの head に挿入されることがわかった。 カスタムテーマにしたかったので、custom.html から style用ファイル と analytics用 JSファイル を読み込みようにした。  style用ファイル には自分がカスタムした部分のCSSを、 analytics用 JSファイルには例の Google Analytics 用コード9行が書かれています。\nまた、customファイルは以下の通りです。\n\u0026lt;!-- Custom Style --\u0026gt; {{ partial \u0026#34;style/custom\u0026#34; . }} \u0026lt;!-- Analytics --\u0026gt; {{ if not .Site.IsServer }} {{ partial \u0026#34;google/analytics\u0026#34; . }} {{ end }} ↑ デバッグでは Google Analytics がうごかないようにしています\nさいごに カスタマイズしたサイトは以下のようになりました！\n COALABO. 完成 \n自分があまりチャレンジしたことのない配色でデザインしてみたのですが、 結構きれいにまとまってて気に入ってます！\nデータの蓄積された Google Analytics をみるのが楽しみです。\n","date":"2021-04-28T00:00:00+09:00","image":"https://coalabo.net/p/hugo/cover_hud1f34bc1807131a1cc8a7fd3b9d7a094_12938_120x120_fill_q75_box_smart1.jpg","permalink":"https://coalabo.net/p/hugo/","title":"Hugo + GitHub Pages + 独自ドメイン でサイトを構築する"},{"content":"察してください、ネタ回です Molly fantasy って実在したんですね。\n今回は、友人十数名が入ったDiscordサーバーがあるのですが、 そのサーバー用の Bot を作った、という箸休め回です。\nこの Bot は、みんなが登録したキーワードを打つと対応した語録を発言してくれます。\nなんか盛り上がって、つくることになった 草Botくん、「草」という文字が入っていると、「草」と返してくれることからこの名前がついたんです。\n 草Botくん \n実はこの草Bot、今はおもちゃにされています。\nもはやBotの表示名も変えられてますw\n敗因: 誰でもプルリクOK＆自動デプロイ仕様にしてしまった 最初は「草」と返してくれる Bot だったのですが、サーバーメンバーがこの Bot にどんどん単語を登録していきました。 ただ、そのセンスがかなり良すぎるので、本来の目的が語録に変わって私も大満足です(笑)\nせっかくなので、自分のお気に入り語録を紹介しましょう。\n これ何だかわかりますか？\n お気に入り語録 その1 \n↑ これをみてピンときた人はさすがですね ！\n  実はこれ \nこれですね！いつものやつです。\n実は以前、みんなで Raspberry Pi OS をセットアップしてた時ですが、 日本語化がうまくいかず、文字化けで何も見えない現象が発生してしまいました。\n唯一文字化けしていても意味がわかった文面が上の文字列で、\n 伏字にしているのに、隠せれてないwwww\n という経緯で追加されました(笑)\n もう一つのお気に入りはこれです。\n 「腹痛」に反応します \n「腹痛」という単語を聞くと、よくわからない係数を測ってくれ、それに応じてアナウンスが流れます。\n 元ネタはこちら ニコニコ大百科（ドミネーター）\n しかもこれは、例のよくわからない係数（乱数）に応じてメッセージが変わります。\n今回の技術的なコト Node.js で作りましたが、Bot はすぐできるので記事にするほどでもないかと思います。\n詳しくは以下のドキュメントをどうぞ！\n Discord.js https://discord.js.org\n 今回、この Bot は Herokuにデプロイしているので、こちらの知見を共有したいと思います。\nHerokuでは、GitHubリポジトリとHerokuAppを連携させることができます。連携しておくと、 GitHubのmainブランチにプッシュされた時に Webhook が飛ばされ Heroku に自動でデプロイされるのでとても便利です。\nただ今回、気をつける点が2つありました。\n Procfile を作成すること プロセスタイプを worker に設定すること  この2つを共有して、本記事の締めにしたいと思います。\nProcfile を作成すること Procfile とは、デプロイ時にどのようなコマンドで run（開始）するかを記述したものです。\nProcfile | Heroku Dev Center には以下のような記述があります。\n Herokuによりサポートされているほとんどの言語で書かれたアプリをデプロイするのに、Procfileは必要はありません。\n  プラットフォームが使われている言語を自動的に検知し、アプリケーションサーバーを起動するために、デフォルトのwebプロセスタイプを作成してくれます。\n しかし自動的に検知してくれなかったのか、私の環境では実行されなかったので Procfile を作成しました。\n書き方は以下の通りです。\n(processType) : (command) 今回の場合、以下の記述が必要です。\nworker: node index.js Procfile はアプリのルートディレクトリに設置する必要があります。\ndyno を worker に設定すること もう1つ、今回 Heroku 独特のプロセス処理の種類である dyno をデフォルトから変更する必要がありました。\ndyno には web , worker , one-off の3種類があります。\n   種類 機能     Web ルーターから HTTP トラフィックを受信し、通常は Web サーバーを実行します。   Worker バックグラウンドジョブ、キューイングシステム、時間指定のあるジョブなどを実行します。   One-off 管理タスクの処理（REPL シェルを実行してデータベースの移行や一時的なバックグラウンド作業を行う場合など）に使用します。    今回、Discord Bot では常にチャンネルのテキストを取得する必要があるため、worker に設定する必要があります。\nHerokuCLI を導入している場合は、以下のコマンドで worker に切り替えることができます。\nheroku ps:scale worker=1 さいごに なんだかんだ、やっぱりBotがいてくれると楽しいですよね。\n次はもっと有用な Bot を作りたいと思います (笑)\n","date":"2021-04-25T00:00:00+09:00","image":"https://coalabo.net/p/wbot/cover_hub8c1acb45d2236871445ffc5c0753e18_55702_120x120_fill_q75_box_smart1.jpg","permalink":"https://coalabo.net/p/wbot/","title":"草bot (wbot) の開発談"},{"content":"やっぱアプリ化、したいよね！！ Webベースのツールを作ると、そのアプリ版を作りたくなる、ここまでがテンプレですよね。\n今回は、ストアにリリースが手軽な Android アプリを制作したいと思います。\nAndroid Studio 使いやすい\u0026hellip; この時、プログラミングというものに触れてまだ半年もたっていませんでした。 なので初心者でも使いやすい Visual Studio Code を当時愛用していました。（今でも時々使っています）\nしかし今回アプリ開発というのもあり、デバッグのしやすいエディタを使うことにしました。 まぁもちろん Android Studio 一択になるわけですが。 JetBrains 社が開発したソフトウェアを初めて触ったのですが、 これがまた使いやすいソフトウェアで感動したのを覚えています。 （私が JetBrains 信徒になる話はまたいつか）\n Android Studio のデザイン画面 \nさぁ開発だ！ の前に、デザインを作っていきます。\nスマホによってサイズが異なるので、対応できるデザインを意識して作成しました。\n Adobe XD \nコーディング すべしぬべし 今回の技術的な部分です。サーバーの様子を取得するのとリクエストを送る機能をつけます！（大したことはしてませんが）\n スプラッシュ画面（情クラ！アプリ）  ホーム（情クラ！アプリ） \nまず、オンラインプレイヤーの取得部分です。 ホーム画面の上半分には、オンラインのメンバーが一覧でわかるようにしています。\n今回、Minecraftの画像を取得するAPIを自作しました。 そこからAndroidに画像を取得するようにしています。 APIからの画像取得には、Picasso というライブラリを使用しました。\n Picasso（公式サイト） https://square.github.io/picasso/\n 具体的には、以下のような書き方でさくっとインターネットから画像取得ができちゃうものです！\nPicasso.get() .load(\u0026#34;https://jokura.net/api/getSkin?id=minecraft_id\u0026#34;) // 今回作成したAPI  .into(face1); face1というのは ImageView の id で、APIから取得した画像を流し込んでくれます！\nまた、プレイヤーがオンラインかどうかは、用意したAPIから返ってきた情報を元に表示を切り替えます。 APIからのGET・POSTメソッドには、便利な OkHttp3 などの便利なライブラリがありますが、 この時は初心者だったこともあり、Java通信（HttpUrlConnection）で実装しました(笑)\nvar connection: HttpURLConnection? = null var reader: BufferedReader? = null val buffer: StringBuffer try { val url = URL( /* 通信するAPI */ ) connection = url.openConnection() as HttpURLConnection connection.connect() // ここで指定したAPIを叩いています。  // 取得したデータを処理していきます。とりあえず取得した文字をbufferに。  val stream = connection.inputStream reader = BufferedReader(InputStreamReader(stream)) buffer = StringBuffer() var line: String? while (true) { line = reader.readLine() if (line == null) break buffer.append(line) } // ここからJSONに変換していきます。  val jsonText = buffer.toString() val parentJsonObj = JSONObject(jsonText) // オンラインメンバーの情報は、JSON内の top というキーの中に格納してあります。  val parentJsonArray = parentJsonObj.getJSONArray(\u0026#34;top\u0026#34;) val detailJsonObj = parentJsonArray.getJSONObject(0) // player1さんのオンライン状況が取得できました！  val player1: Int = detailJsonObj.getInt(\u0026#34;player1\u0026#34;) return player1 } catch (e: MalformedURLException) { e.printStackTrace() } catch (e: IOException) { e.printStackTrace() } catch (e: JSONException) { e.printStackTrace() } // 接続を切断してあげましょう。おつかれ！ finally { connection?.disconnect() try { reader?.close() } catch (e: IOException) { e.printStackTrace() } } // 失敗した時はnullやエラーコードなどを返しましょう。 return null } 一部抜粋していますが、こんな感じでリクエストをかいています。\nちょっと脱線しちゃいましたね 他にどんな機能を実装したのかみてみましょう！たぶんこちらの方が興味ありますよね (笑)\n ホーム（情クラ！アプリ）  サーバー稼働状況（情クラ！アプリ） \nトップ画面には、「バックアップ」と「再起動」の2つのボタンが用意してあります。 この2つのボタンについては後述します。\nまた、「稼働状況」を押すとサーバーの現在の状況をみることができます。 今思うと、ここのデザインは Web 版と同じなので、 WebView で表示させるとよかったですね (笑)\nとりあえず、今回は xml ファイルで view を丁寧に記述しました。\n今回のメインディッシュ 本アプリのメイン機能は、なんといってもこの2つです！\nトップに設置されている「バックアップ」「再起動」の機能について説明します。\n バックアップ 実行不可（情クラ！アプリ）  バックアップ 実行可能（情クラ！アプリ） \nこの Activity の開始と同時に、バックエンドと通信して 再起動 または バックアップ が実行できるか確認して、表示を切り分けます。\n実行できない例としては、\n サーバーが停止している 他のユーザが現在処理を行っている 処理実行後のクールタイムにある  のいずれかですね。右上の更新ボタンで最新情報を再取得できます。\n今回、神経を使ったのは処理部分でした なんといってもサーバー関連で怖いのが、リクエストが同時に送られることですよね。\n今回、サーバーを制御できるプラットフォームが複数あるため、他のアプリやWebサイトから同時にリクエストが送られた場合、最初のリクエストのみ通す必要があります。 また、再起動やバックアップなどが実行された後は、クールタイムを設ける必要もあります。\nそういった、さまざまなリクエストを処理できるように、情クラ！ではバックエンドのAPIを用意し、そこからサーバー処理を行っています。 リクエストが失敗した場合には、その理由をエラーコードで返しユーザに通知しています。 実行可能の状態でボタンを押した場合でも、バックエンドでキャンセルされた場合その旨のトーストが表示されます。\n２年の月日を経て\u0026hellip; 前回の記事でも述べた通り、情クラ！はサービス終了しました。\n今回、\u0026ldquo;プログラムの整合性\u0026rdquo; というものを勉強できた、サービス開発だったと思います。\n他にも Minecraft 関係で得た知見はかなり大きいものだったので、今後何か一般向けのサービスに繋げていきたいと思います。\n","date":"2021-04-23T09:19:41+09:00","image":"https://coalabo.net/p/jokura-app/cover_hu4de8297eba748400c5bc7c54477d6389_102123_120x120_fill_q75_box_smart1.jpg","permalink":"https://coalabo.net/p/jokura-app/","title":"アプリ版 Minecraft サーバー制御ツールの制作"},{"content":"Minecraft っていいよね Minecraft って、複数人でプレイすると沼ですよね。\n「 情クラ！」という、知り合い十数名程度の Minecraft サーバーで遊んでいるのですが、 今や大陸内には高速道路が広がり、複数の大陸間には大きな橋が建築されています。（やばすぎ）\n 瀬戸大橋（こんなのが 5, 6本架かっています） \nある日、Minecraft のサーバー管理者になった 最初はみんなで家に集まって、ローカルでサーバーを建ててプレイしていました。 しかしプレイヤーがどんどん増えてきたため、Google Cloud Platform（GCP）でサーバーを立てることにしました。\nこれが、「情クラ！」という Minecraft サーバーの誕生のきっかけです。\nいつどこでも Minecraft サーバーで遊べる環境が完成し、ワールドの発展度合いが加速度的に大きくなったのですが、 しかし1つ大きな問題がでてきました。\nこれは、Google Cloud Platform（GCP）がまだ365日無料トライアルだった頃の話なのですが、 当時GCPには、年間 30,000円分の無料クレジットが付属していました。 それをちょうど1年間で使い切るn1-standard-1 プラン（仮想 CPU 数: 1, メモリ: 3.75 GB）で運用していたのですが、 大人数が長時間プレイしていると動作がもっさりしてくるのです。\n GCPの料金（N1 標準マシンタイプ） \nサーバー管理者だった私は、連絡を受けるたび SSH 接続してサーバーを再起動していました。\nですがここは、ぜひ技術の力で課題解決をしよう！ということで、Minecraftサーバーを誰でも簡単に制御できる、Webアプリケーションを作成することになりました。\nまずは完成品をどうぞ  トップページ（情クラ！）  サーバー状況確認ページ（情クラ！） \n最初に実装したのは、「ホーム」のお知らせ（左）と「サーバー状況」の確認画面（右）です。 モバイルファーストのデザインですが、きちんとレスポンシブ対応させています。\n以下、それぞれの軽い機能紹介です。\n   ページ 機能     ホーム プレイヤーが自由に建築報告を投稿することができます   サーバー状況 サーバーの起動・停止状況やオンラインメンバーを確認できます    ここで、少し技術的な話をしましょう 一応そういうブログ（ ？）なので、今回 Minecraft サーバーと連携したノウハウについて記述しておきます。\nMinecraft サーバーでは、ある特定のパケットを受け取ると、現在のサーバーのステータスを返す機能が搭載されています。 こちらのページに詳しい仕様が載っています。 これらの仕様は、Minecraft 起動時のマルチプレイ選択画面などに利用されているそうです。\n続いて、詳しい仕様について順を追って説明していきます。\nまず、クライアント側が以下のような Handshake パケットを送信します。\n   Packet ID Field Name Field Type Notes     0x00 Protocol Version VarInt See protocol version numbers. The version that the client plans on using to connect to the server (which is not important for the ping). If the client is pinging to determine what version to use, by convention -1 should be set.   ^ Server Address String Hostname or IP, e.g. localhost or 127.0.0.1, that was used to connect. The Notchian server does not use this information. Note that SRV records are a complete redirect, e.g. if _minecraft._tcp.example.com points to mc.example.org, users connecting to example.com will provide mc.example.org as server address in addition to connecting to it.   ^ Server Port Unsigned Short Default is 25565. The Notchian server does not use this information.   ^ Next state VarInt Should be 1 for status, but could also be 2 for login.    ここで重要なのが、このレスポンスを待たずに続けてリクエストパケットを送信します。 その応答パケットとして、サーバーが以下のようなJSONを返します。\n{ \u0026#34;version\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;1.16.1\u0026#34;, \u0026#34;protocol\u0026#34;: 47 }, \u0026#34;players\u0026#34;: { \u0026#34;max\u0026#34;: 12, \u0026#34;online\u0026#34;: 5, \u0026#34;sample\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;minecraft_name\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;4566e69f-c907-48ee-8d71-d7ba5aa00d20\u0026#34; } ] }, \u0026#34;description\u0026#34;: { \u0026#34;text\u0026#34;: \u0026#34;Hello world\u0026#34; }, \u0026#34;favicon\u0026#34;: \u0026#34;data:image/png;base64,\u0026lt;data\u0026gt;\u0026#34; } このJSONを使って、サーバの各情報が取得できます。\nまた、このパケットを送信するライブラリを探してみたところ、 C#・ Java・ Python3・ PHP 用に作られたコードが見つかりました。 今回は、PHPライブラリを使用しました。\n実装した機能 あまり技術的な話をすると長くなっちゃいそうなので、次に行きます。\n他に実装した機能も紹介します。\n ナビゲーションバー（情クラ！）  再起動（情クラ！） \n   ページ 機能     ピクチャ プレイヤーが自由に画像を投稿することができます   オンラインユーザ ホワイトリストに登録されたプレイヤーが表示され、サーバーに入っているかどうかがわかります   起動・停止 サーバーをしばらく利用しない場合は、GCP課金対策のためにサーバーを切ることができます   再起動 Minecraft サーバーを再起動させることができます   バックアップ実行 Minecraft サーバーのバックアップを作成します（毎日5:00に定期実行されます）   バックアップ履歴 バックアップ履歴の一覧を表示します   情クラマップ 情クラワールドの建築物紹介が載っています   情クラ！公式アプリ 公式アプリへのリンクです    みんなログインしよう 今回サーバーのコントロール機能が Web に公開されるので、ログイン機能を実装する必要があります。 全員 Google アカウントを持っていたので、Firebase Authentication を使って Google ログインを実装しました。\nFirebase に関する記事はたくさんあると思うので、今回説明は省略します。\n以下の公式ドキュメントを読むとよくわかりますよ（雑）\n Firebase Authentication（Google） https://firebase.google.com/docs/auth/web/start?hl=ja\n マイクラサーバーのバックエンドはどうなってるの？ Minecraft サーバーでは、Node.js + TypeScript でAPIを構築しています。\nたとえば、以下は Minecraft サーバーを起動するルーティングの一部抜粋です。\n// --- Start Server ------------------------------------------------------------ router.post(\u0026#39;/api/run/start\u0026#39;, (req: express.Request, res: express.Response) =\u0026gt; { const schema = Joi.object({ user: Joi.string().required(), }) const validation = schema.validate(req.body) if (validation.error) { post(\u0026#34;不正なリクエストを拒否しました\u0026#34;, \u0026#34;ユーザ固有IDが設定されていないリクエストが送信されました\u0026#34;, 3) res.status(400).send(\u0026#39;Bad request\u0026#39;) return } statusAsync(req.body.user) .then(() =\u0026gt; { startAsync(req.body.user) .then(() =\u0026gt; { res.send(\u0026#39;Success\u0026#39;) }) .catch((err) =\u0026gt; { if (err == \u0026#39;failed due to run interval\u0026#39;) post(\u0026#34;起動コマンドを拒否しました\u0026#34;, \u0026#34;前回の処理の実行から\u0026#34; + process.env.WAIT_SECONDS_FROM_LAST_PROCESS + \u0026#34;秒経過していないため、コマンドを拒否しました。\u0026#34;, 2) else post(\u0026#34;起動コマンドを拒否しました\u0026#34;, \u0026#34;サーバーが既に起動しているため、起動コマンドを拒否しました。サーバーとの同期ができていない恐れがあります。[Err: startAsync()]\u0026#34;, 2) res.status(400).send(\u0026#39;Bad request\u0026#39;) }) }) .catch(() =\u0026gt; { post(\u0026#34;起動コマンドを拒否しました\u0026#34;, \u0026#34;既に起動しているため、起動コマンドを拒否しました。サーバーとの同期ができていない恐れがあります。[Err: statusAsync()]\u0026#34;, 2) res.status(400).send(\u0026#39;Bad request\u0026#39;) }) }) // ----------------------------------------------------------------------------- まず、Joi という npm パッケージを利用して、送信されたクエリパラメータなどのバリデーションを行います。 そして、post( ) という関数がありますが、これはサーバーのエラーなどを Discord のサーバーに通知するための関数として用意してあります。 server.jar は screen 上で走らせているのですが、screen の二重起動にならないように初めに起動してもよいかのチェックも行っています。\nまた、実行系はシェルにまとめてあります。\n#!/bin/bash  JARFILE=/home/jokura_server/minecraft/server.jar MEM=15000M cd `dirname $0` screen -UAmdS minecraft java -server -Xms${MEM} -Xmx${MEM} -jar ${JARFILE} nogui 上記のファイルは、起動用のシェルです。\n他にも再起動用やバックアップ用などのシェルも用意してあります。（下記は 再起動用）\n#!/bin/bash  WAIT=30 STARTSCRIPT=/home/jokura_server/minecraft/start.sh SCREEN_NAME=\u0026#39;minecraft\u0026#39; screen -p 0 -S ${SCREEN_NAME} -X eval \u0026#39;stuff \u0026#34;say \u0026#39;${WAIT}\u0026#39;秒後にサーバーを再起動します\\015\u0026#34;\u0026#39; screen -p 0 -S ${SCREEN_NAME} -X eval \u0026#39;stuff \u0026#34;say すぐに再接続可能になるので、しばらくお待ち下さい\\015\u0026#34;\u0026#39; sleep $WAIT screen -p 0 -S ${SCREEN_NAME} -X eval \u0026#39;stuff \u0026#34;stop\\015\u0026#34;\u0026#39; while [ -n \u0026#34;$(screen -list | grep -o \u0026#34;${SCREEN_NAME}\u0026#34;)\u0026#34; ] do sleep 1 done $STARTSCRIPT 今現在の 情クラ！ 今は残念ながら、Webサービスを終了しています。 （Minecraft の活動自体はしています！）\n2021年4月から、Minecraft サーバーを別のメンバーが自宅サーバーで建ててくれることになりました。 やはり GCP などの従量課金制のサーバーで運用するには、かなり気を使ってしまうので正直解放されました。\nかといって、情クラ！での活動はまだまだ続けていく予定なので、ぜひこのブログでも活動を共有していけたらなと思います！\n アクティブすぎるメンバーの写真 \n","date":"2021-04-22T09:06:44+09:00","image":"https://coalabo.net/p/jokura-web/cover_hu009098f9a09b5c87310a26959658631a_93318_120x120_fill_q75_box_smart1.jpg","permalink":"https://coalabo.net/p/jokura-web/","title":"Minecraftサーバーのリモート制御サイトを制作したお話（情クラ！）"}]