<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on コアラボ (coalabo.)</title><link>https://coalabo.net/post/</link><description>Recent content in Posts on コアラボ (coalabo.)</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 05 Jun 2021 22:00:00 +2100</lastBuildDate><atom:link href="https://coalabo.net/post/index.xml" rel="self" type="application/rss+xml"/><item><title>誰にとってもわかりやすいコミットメッセージ</title><link>https://coalabo.net/p/commit-message/</link><pubDate>Sat, 05 Jun 2021 22:00:00 +2100</pubDate><guid>https://coalabo.net/p/commit-message/</guid><description>みんなコミットメッセージってどんなふうに書いてるのかな？ ふと気になって、さまざまなオープンソースのコミットメッセージをみてきました。
今まで自分が使ってきたコミットメッセージがあまりにも一般的じゃなかったので、ここで統一したいと思います！（覚え書き）
これまでのコミットメッセージの付け方 はじめて共同プロジェクトを立ち上げた時に、とあるネット上の人のコミットメッセージの書き方を真似て、マイルールとしていました。
大かっこ[]の中に Prefix を入れ（例：add fix hotfix など）、その後に日本語でコミットメッセージを記入するという形でしたが、 あまりこの書き方をしている人が多くなかったのです&amp;hellip;
[add] リアルタイムデータベースとの通信機能 もっとも多かった印象がある &amp;amp; かっこよかったもの Add: リアルタイムデータベースとの通信機能 やっぱこういう Prefix のつけ方がかっこいいですよね。
あと当たり前ですが、英語でのコミットメッセージが多かったので、個人開発は英語、友人との共同開発は日本語という感じに分けてもいいですね。
Prefix で代表的なもの add・update・upgrade・fix・hotfix などはよく聞きますが、どういった Prefix が共通認識としてよく使われているのでしょうか。
また、update と upgrade など、違いがよくわからないものも多いので、使う場合のシチュエーションも同時に調べてみたいと思います。
Prefix 使うシチュエーション Add: 機能やファイルなどの追加 Improve: コードの改善・リファクタリング Change: 仕様変更 Update: 機能修正（バグではない） Upgrade: バージョンアップ Disable: 機能の無効化（コメントアウト等） Rename: ファイル名を変更する Remove: ファイルを削除する Move: ファイルを移動する Fix: バグ修正 Hotfix: クリティカルなバグ修正 Revert: 変更取り消し 調べてみた結果、update と upgrade は上記のように分けている人もいれば、update　がバージョンアップとしている人もいました。 また、improve の代わりに clean を使う人も多かったですが、こちらはシチュエーションは同じなので問題にはならなそうです。 change と update もほぼ同じ印象を受けました。</description></item><item><title>鯖管向け！Minecraftサーバーの監視ツールの制作</title><link>https://coalabo.net/p/minecraft-server-monitor/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +2100</pubDate><guid>https://coalabo.net/p/minecraft-server-monitor/</guid><description>今回の Firebase は一味違います 今回作成する監視サーバですが、Google Cloud Platform の Cloud Scheduler を使って、Firebase の Cloud Functions を定期実行させます。
Cloud Scheduler と Cloud Functions の連携方法ですが、 Google が用意してある firebase-functions というライブラリに付随しているスケジュール機能を使用することで、 自動で GCP の Cloud Scheduler に登録されます。
天下のGoogle様様 Firebase で定期実行って、かなり金銭的なコストがかかりそうですよね。
Web サーバーなどとは違い、時間指定のあるジョブ（ Worker ）になるので、 結構ホスティングサービスも少ないですし、今回作成する監視サーバーは10分毎に定期実行します。
ですが、Cloud Functions では月200万回までの呼び出しは無料です！！
具体的に、関数の呼び出しの課金は以下の通りです。
月間呼び出し回数 料金（100 万回あたり） 最初の 200 万回 無料 200 万回を超えた分 $0.40 今回は、かなり複雑なDBの整形ジョブやWebサービスのCRONジョブをするわけではないので、無料枠で十分です。
ただし気をつけないといけないのが、関数のデプロイには料金がかかります。
まず、関数は無料枠のない Container Registry に保存されるため、デプロイ後にわずかな料金が発生します。 Container Registry のストレージ費用は、1 GB あたり月額約 $0.</description></item><item><title>Hugo + GitHub Pages + 独自ドメイン でサイトを構築する</title><link>https://coalabo.net/p/hugo/</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0900</pubDate><guid>https://coalabo.net/p/hugo/</guid><description>ブログを始めてみたい！ ブログを始めたいと思ったきっかけは、自分が作ったサービスが終了してしまうことでした。
せっかく作ったものが消えて日の目を浴びなくなるのは勿体ないので、 ブログという形で供養してやります！
なんかかっこいい方法でホスティングしたい 第一として、運用費用があまりかからないようにする必要があります。 なので、Nuxt.js を使って静的サイトを書き出し、GitHub Pages にデプロイしようかと考えていました。
ただ、フロントエンドやデザインのお仕事が続いており、自分でフロントを作成するのもなんだかなぁという状態でした。
とその時、知り合いからHugoを布教されました。なんとHugoにはテンプレートがたくさんあるじゃないですか！
Hugoは触ったことがなかったので、勉強がてら（といっても使い方の知見を得るだけですが）これを使ってブログを作成することにしました。
書き出しめっちゃ速い！！ 記事を Markdown で書いていくのですが、保存するたびホットリロードでブラウザに反映してくれます。
その速度が明らかに速いのです！（私が React や Nuxt.js などに慣れているからかもしれませんが&amp;hellip;）
書き出し速度がやばい！
Terminal 上に表示されている再レンダリング時間は 9ms とでていますね。
もう、一目惚れしました。
GitHub Pages にデプロイしよう すいません、タイトル詐欺です。 デプロイする前に1つすることがありました。
今回 Hugo Theme Stackというテーマパックを編集して使ったのですが、 これを submodule 登録しておきます。
$ git submodule add https://github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack また、git から clone する時は、submodule も忘れず引っ張ってくるようにしましょう。
$ git clone --recurse-submodules --depth 1 git@github.com:smpny7/coalabo.git GitHub Actions で自動化しよう 今度こそ、GitHub Actions で GitHub Pages に自動デプロイするように設定していきます。
今回 GitHub Pages 用に、&amp;lt;GitHub ユーザー名&amp;gt;.</description></item><item><title>草bot (wbot) の開発談</title><link>https://coalabo.net/p/wbot/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0900</pubDate><guid>https://coalabo.net/p/wbot/</guid><description>察してください、ネタ回です Molly fantasy って実在したんですね。
今回は、友人十数名が入ったDiscordサーバーがあるのですが、 そのサーバー用の Bot を作った、という箸休め回です。
この Bot は、みんなが登録したキーワードを打つと対応した語録を発言してくれます。
なんか盛り上がって、つくることになった 草Botくん、「草」という文字が入っていると、「草」と返してくれることからこの名前がついたんです。
草Botくん
実はこの草Bot、今はおもちゃにされています。
もはやBotの表示名も変えられてますw
敗因: 誰でもプルリクOK＆自動デプロイ仕様にしてしまった 最初は「草」と返してくれる Bot だったのですが、サーバーメンバーがこの Bot にどんどん単語を登録していきました。 ただ、そのセンスがかなり良すぎるので、本来の目的が語録に変わって私も大満足です(笑)
せっかくなので、自分のお気に入り語録を紹介しましょう。
これ何だかわかりますか？
お気に入り語録 その1
↑ これをみてピンときた人はさすがですね ！
実はこれ
これですね！いつものやつです。
実は以前、みんなで Raspberry Pi OS をセットアップしてた時ですが、 日本語化がうまくいかず、文字化けで何も見えない現象が発生してしまいました。
唯一文字化けしていても意味がわかった文面が上の文字列で、
伏字にしているのに、隠せれてないwwww
という経緯で追加されました(笑)
もう一つのお気に入りはこれです。
「腹痛」に反応します
「腹痛」という単語を聞くと、よくわからない係数を測ってくれ、それに応じてアナウンスが流れます。
元ネタはこちら ニコニコ大百科（ドミネーター）
しかもこれは、例のよくわからない係数（乱数）に応じてメッセージが変わります。
今回の技術的なコト Node.js で作りましたが、Bot はすぐできるので記事にするほどでもないかと思います。
詳しくは以下のドキュメントをどうぞ！
Discord.js https://discord.</description></item><item><title>アプリ版 Minecraft サーバー制御ツールの制作</title><link>https://coalabo.net/p/jokura-app/</link><pubDate>Fri, 23 Apr 2021 09:19:41 +0900</pubDate><guid>https://coalabo.net/p/jokura-app/</guid><description>やっぱアプリ化、したいよね！！ Webベースのツールを作ると、そのアプリ版を作りたくなる、ここまでがテンプレですよね。
今回は、ストアにリリースが手軽な Android アプリを制作したいと思います。
Android Studio 使いやすい&amp;hellip; この時、プログラミングというものに触れてまだ半年もたっていませんでした。 なので初心者でも使いやすい Visual Studio Code を当時愛用していました。（今でも時々使っています）
しかし今回アプリ開発というのもあり、デバッグのしやすいエディタを使うことにしました。 まぁもちろん Android Studio 一択になるわけですが。 JetBrains 社が開発したソフトウェアを初めて触ったのですが、 これがまた使いやすいソフトウェアで感動したのを覚えています。 （私が JetBrains 信徒になる話はまたいつか）
Android Studio のデザイン画面
さぁ開発だ！ の前に、デザインを作っていきます。
スマホによってサイズが異なるので、対応できるデザインを意識して作成しました。
Adobe XD
コーディング すべしぬべし 今回の技術的な部分です。サーバーの様子を取得するのとリクエストを送る機能をつけます！（大したことはしてませんが）
スプラッシュ画面（情クラ！アプリ） ホーム（情クラ！アプリ）
まず、オンラインプレイヤーの取得部分です。 ホーム画面の上半分には、オンラインのメンバーが一覧でわかるようにしています。
今回、Minecraftの画像を取得するAPIを自作しました。 そこからAndroidに画像を取得するようにしています。 APIからの画像取得には、Picasso というライブラリを使用しました。
Picasso（公式サイト） https://square.github.io/picasso/
具体的には、以下のような書き方でさくっとインターネットから画像取得ができちゃうものです！
Picasso.get() .load(&amp;#34;https://jokura.net/api/getSkin?id=minecraft_id&amp;#34;) // 今回作成したAPI .into(face1); face1というのは ImageView の id で、APIから取得した画像を流し込んでくれます！
また、プレイヤーがオンラインかどうかは、用意したAPIから返ってきた情報を元に表示を切り替えます。 APIからのGET・POSTメソッドには、便利な OkHttp3 などの便利なライブラリがありますが、 この時は初心者だったこともあり、Java通信（HttpUrlConnection）で実装しました(笑)</description></item><item><title>Minecraftサーバーのリモート制御サイトを制作したお話（情クラ！）</title><link>https://coalabo.net/p/jokura-web/</link><pubDate>Thu, 22 Apr 2021 09:06:44 +0900</pubDate><guid>https://coalabo.net/p/jokura-web/</guid><description>Minecraft っていいよね Minecraft って、複数人でプレイすると沼ですよね。
「 情クラ！」という、知り合い十数名程度の Minecraft サーバーで遊んでいるのですが、 今や大陸内には高速道路が広がり、複数の大陸間には大きな橋が建築されています。（やばすぎ）
瀬戸大橋（こんなのが 5, 6本架かっています）
ある日、Minecraft のサーバー管理者になった 最初はみんなで家に集まって、ローカルでサーバーを建ててプレイしていました。 しかしプレイヤーがどんどん増えてきたため、Google Cloud Platform（GCP）でサーバーを立てることにしました。
これが、「情クラ！」という Minecraft サーバーの誕生のきっかけです。
いつどこでも Minecraft サーバーで遊べる環境が完成し、ワールドの発展度合いが加速度的に大きくなったのですが、 しかし1つ大きな問題がでてきました。
これは、Google Cloud Platform（GCP）がまだ365日無料トライアルだった頃の話なのですが、 当時GCPには、年間 30,000円分の無料クレジットが付属していました。 それをちょうど1年間で使い切るn1-standard-1 プラン（仮想 CPU 数: 1, メモリ: 3.75 GB）で運用していたのですが、 大人数が長時間プレイしていると動作がもっさりしてくるのです。
GCPの料金（N1 標準マシンタイプ）
サーバー管理者だった私は、連絡を受けるたび SSH 接続してサーバーを再起動していました。
ですがここは、ぜひ技術の力で課題解決をしよう！ということで、Minecraftサーバーを誰でも簡単に制御できる、Webアプリケーションを作成することになりました。
まずは完成品をどうぞ トップページ（情クラ！） サーバー状況確認ページ（情クラ！）
最初に実装したのは、「ホーム」のお知らせ（左）と「サーバー状況」の確認画面（右）です。 モバイルファーストのデザインですが、きちんとレスポンシブ対応させています。
以下、それぞれの軽い機能紹介です。
ページ 機能 ホーム プレイヤーが自由に建築報告を投稿することができます サーバー状況 サーバーの起動・停止状況やオンラインメンバーを確認できます ここで、少し技術的な話をしましょう 一応そういうブログ（ ？）なので、今回 Minecraft サーバーと連携したノウハウについて記述しておきます。</description></item></channel></rss>