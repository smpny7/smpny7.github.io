<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on コアラボ (coalabo.)</title><link>https://coalabo.net/post/</link><description>Recent content in Posts on コアラボ (coalabo.)</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Tue, 07 Sep 2021 18:00:00 +0900</lastBuildDate><atom:link href="https://coalabo.net/post/index.xml" rel="self" type="application/rss+xml"/><item><title>【岡山大学依頼】接触追跡アプリの制作</title><link>https://coalabo.net/p/cacao/</link><pubDate>Tue, 07 Sep 2021 18:00:00 +0900</pubDate><guid>https://coalabo.net/p/cacao/</guid><description>以前に制作したアプリ 過去に部活内で使用するために、以前 こんなアプリ（部室の在室状況・体調記録アプリ） を作りました。
電子計算機研究会で使用しているアプリ
これが岡大理事の耳に入ったらしく、コロナ対策のため、全学向けにアプリを作ることになりました!!
具体的には、部活棟を中心に各部屋に1台 Android 端末を設置し、そこに学生証をかざすことで入退室を管理します。 感染者が出た場合は、学務課がその学籍番号を入力することで、2週間以内に同じ部屋にいた人を割り出すことができます。
仕様決め このアプリの制作には、かなりの規模のサーバアクセスになりますし、扱うデータも膨大になるのでセキュリティの懸念もあります。そのため、岡山大学情報統括センターと相談を重ねながら仕様決めを行いました。
【機能】
各部屋にある端末で入室処理と退室処理を行える。 学務課からは、「各部屋に誰が何人いるか」「各部屋の密度」を一覧で見れるページ（Webサイト）を用意。指定日の各部屋の入退室状況を Excel でダウンロードすることも可能。 学務課の権限のアカウントのみ、発症者の学籍番号を入力すると、過去2週間以内に「その人が会った人一覧」と「会った部屋」を出力することができる。また、2次的に接触した疑いのある生徒も同様に出力できる。 【特徴】
セキュリティのため、全て学籍番号で管理する。氏名や所属部活等の情報は一切保管せず、全てランダムな識別子を用いて管理。 NFC対応端末を使用することで、学生証をスマホにかざし、入退室登録を行う。 APIにアクセスするための権限を2つ作成する。 各部屋用: この権限のない端末からの、データ送信は不可 学務課用: この権限はWebへのアクセスも可能、データ管理や追跡も行える。 また、このいずれかのID・パスワードが流出した場合でも、こちらで無効化することができ、再発行可能である。
【仕様】
A の部屋に行ったあと、A の部屋で退室せずに B の部屋の入室リクエストを行った場合は、A の部屋から退室しますというモーダルと共に、B の部屋へ入室を行う。 退室処理を忘れた場合は、22時に自動的に退室扱いとなる。 統括センターの認可が降りたのでアプリを作る！ 制作期間は約3週間、AppStore と GooglePlayStore での審査期間も考慮して、実質2週間程度。 フロント（アプリ）の開発に時間がかかりそうだと思ったので、FeliCa スキャンが実装できるか心配でしたが、iOS・Android のアプリをいっぺんに作成したかったため Flutter を採用することにしました。Flutter にも NFC を読み取るライブラリは幾つかあるようです。
バックエンドは、とりあえず今回は Web で見れる機能も必要だったので、Laravel を採用しました。アプリとの通信の認証は、Laravel Passport を使用しています。フロントでは Blade ではなく主に Vue.js を使用し、コンソール画面のリロードを少なくしました。</description></item><item><title>【アプリ・Webデザイナー必見】 デザインする際に参考にしているサイトまとめ</title><link>https://coalabo.net/p/design/</link><pubDate>Tue, 07 Sep 2021 16:00:00 +0900</pubDate><guid>https://coalabo.net/p/design/</guid><description>はじめに 私がよく参考にさせて頂いているデザインサイト・フリーアイコンサイトをまとめてみました！
デザイン編 Dribbble Dribbble
全て閲覧するにはアカウントが必要 アニメーションやプロダクトデザインなども掲載されているのが面白いところ Adobe Xd や Figma などのツール向けにダウンロードできるのが素晴らしい UI Garage UI Garage
iOS・Web・Androidとジャンル分けされており、すぐに目的のデザインにたどり着ける このサイトは細かいジャンル分けがされており、「404ページ」・「ダッシュボード」・「設定画面」など90種類以上の項目があり、参考にしたいパーツのデザインにどっぷりと浸かれる 記事ページでは、いろいろなサービスのデザイン考察や設計に役立つTipsを載せていて，暇な時間に軽く読める Material Design Material Design
Googleさんが2014年にデザインガイドラインとして定めた、例の &amp;ldquo;Material Design&amp;rdquo; 視覚的に良いデザイン・悪いデザインを学習できるのは有名だが、動きや起動画面・テキストの表示方法などの細かいUI・UXも学習できる点に価値あり アイコンやテーマもダウンロードできる 動くWebデザインアイディア帳 動くWebデザインアイディア帳
ティザーサイトを制作する際にかなり重宝！！かなりかっこいい 1つの機能（例: ローディング）にもさまざまな配置パターンが用意されており、コードを書く作業がかなり減る jQueryを使用するものが多いので、脱jQueryを目指している方には大変かも&amp;hellip; アイコン編 お気に入りのアイコンを一言で紹介
Feather Feather
角が取れた優しいストロークアイコン アイコン数は若干少なめだが、アイコンが統一しているのでナビゲーションバーなどに使いやすい icons8 icons8
1つの画像に様々な画風のアイコンがたくさんあるため、このWebページを訪れれば欲しいタイプの画像が見つかる 私は 「iOS」 風が好き JAM JAM</description></item><item><title>オンライン授業配信サービスの作成: 戸田塾オンライン</title><link>https://coalabo.net/p/toda-online/</link><pubDate>Tue, 07 Sep 2021 10:00:00 +0900</pubDate><guid>https://coalabo.net/p/toda-online/</guid><description>最近、EdTechって流行ってますよね 私が高校生の時は、映像授業というものを受けてる学生が多かったです。
映像授業は、塾の講義と比べて場所と時間が限定されませんし、何度でも授業を聞き直すことができるのでとても評判が良かったです。 ただ、あれってすごく高い ですよね。一番地元で有名だった映像授業は、4教科で年間100万円近くかかってたそうです。あれだけのシステムを作って、東京の本部で撮影しているため、コストが高いのですかね&amp;hellip;？
もちろんそんなシステムは、個人塾や地方の塾では到底構築できません。 しかし、あまり塾にお金を出せない学生でも、オンラインの恩恵を受けられる選択肢があってもいいと思います。
ということで、地方の塾ではありますが、数学・物理専門の戸田塾と映像授業が見られるサービスを開始しました。
戸田塾オンライン (toda-online.com)
作成したもの 収録した映像をログインユーザが見れるのは最低限として、付加価値としてさまざまな機能をつけたいと思います。
まずは、各講義映像に紐づいたオープンチャット欄をつけていきます。 これは、1つの講義動画に対して質問があった際に、受講生がその動画の横にあるチャット欄で質問をすることができます。また、このチャットは全員が見れるようにしてあり、先生以外にも回答することができたり、同じ質問を持つ受講生が回答を見て理解できるような仕様になっています。
コミュニティ機能（著作権上、動画は非表示にしています）
また、WiFiなどの通信環境がない生徒のことを考慮して、動画のファイルサイズを表記したり、1本の動画が何分で視聴できるかを表記しています。
動画一覧画面（著作権上、動画は非表示にしています）
また、1本の動画を5分以内にし、サクサク見れる、授業進度を感じられるようなサービスにしたいとのことだったので、各項目ごとの達成度をグラフィカルに分かるようなものにしました。
各章 を選択する画面 各節 を選択する画面
スピード重視 やはり、高校生（特に受験生）で映像授業を選択する学生は、勉強効率を重視していると思う( ？)ので、サービスも重くならないように気をつけました。
フレームワークは Laravel で作成していますが、通信などは axios 等で行い再読み込み時間等が最小限になるように工夫しました。
また、大抵の人は最初から順に講義動画を見ていくので、ホーム画面に「次に見る」動画をあらかじめ並べておくようにしました。最後に見た動画と、その前後1つずつの、計3つを表示させています。
そして、動画の内容は再々変わるものではないので、ポスターや動画の情報はキャッシュを表示させ、管理画面から一括でキャッシュを作成できるようにしています。
最後に とりあえず今は、対面での受講生から順に募集を開始し、運用しています。 このブログを見ている人に宣伝をしても、受講する人はいないと思うので、一応リンクだけ貼っておきます(笑)
興味のある方はぜひご連絡ください！ ( 公式サイト )
戸田塾オンライン　https://toda-online.com</description></item><item><title>【コロナ対策】部室の在室状況・体調記録アプリ</title><link>https://coalabo.net/p/i10jan/</link><pubDate>Fri, 03 Sep 2021 22:00:00 +0900</pubDate><guid>https://coalabo.net/p/i10jan/</guid><description>昔々、大学で対面授業が再開し始めた頃&amp;hellip; 2020年夏頃、活動時の体温記録を条件に、岡山大学での部活動が再開されました。
私は 岡山大学電子計算機研究会 という部活の部長を務めているのですが、 活動の際には、全員の「体温・息苦しさなどの症状があるか・だるさや倦怠感を感じるか・入室時刻・退室時刻」を記録するよう指示がありました。
最初の1週間は Google スプレッドシートを共有して、部室に来た部員に手入力してもらってたのですが、 特に 帰る時にパソコン（スマホ）を開いて現在時刻を入力する のがとても面倒&amp;hellip;
どうにかできないかと考え、課題を感じた時に技術で解決するのがエンジニアでしょ！ ということで、部室に設置するアプリを制作することになりました。
その前に この部活では、部員全員にニックネームがついています。 これは、先輩後輩関係なく気軽に呼び合い、技術の共有などコミュニケーションを円滑にするためです。
そして、部屋の入り口にかけてある自分のネームプレートを、入室時には首にかけることになっています。
私のネームプレート（紹介映像より抜粋）
その後ろに、今回小さなQRコードをしのばせました！
QRコード（紹介映像より抜粋）
QRコードの中身のデータは、部内でユニークなuuidを発行しています。
作りたいもの 入退室管理アプリをつくり、部室の入り口に設置します。 必要な機能は以下の通りです。
入室時刻が記録できる 入室時の体温を記録できる 入室時の健康状況をチェックできる 退室時刻が記録できる そして、一番大事なことは、できるだけ入力の手間を最小限にすること です。 何回もボタンをぽちぽちするようなUI・UXでは、そのうち面倒になって誰も入力してくれません! できるだけ画面数を少なくし、アニメーションたっぷりで気持ち良いアプリに仕上げることで入力してくれる人が増えると考えました。
さぁ一番大好きなデザイン（UI設計）の時間です！ ま、まぁもちろん一番好きなのはコーディングですよ&amp;hellip;？
どういうものを作ろうかと構想する、良いアイデアを思いついてアプリに組み込んでいく時間が、一番ワクワクして楽しいですよね。
今回も Figma で、ある程度のデザインを仕上げました。
デザインを制作しました！
左2枚のスクリーンが実際に使用した画面です。
体調チェックについては、最初は一番右のデザインでしたが、入力者が「良好」・「不調」や「なし」・「あり」等のボタン内の文字を読む時間（コスト）がかかってしまい、また分かりにくいので、真ん中のデザインの直感的でわかりやすいチェックボックス式へと改良したりしています。
実際に制作していこう！ 今回使うのはこちら↓
【 材料 】
MacBook Pro: 一人前 herokuサーバ（Heroku Postgres をトッピング）: 一台 部内設置端末（Android）: お好みで 【 調味料 】
Kotlin（フロント） Node.</description></item><item><title>VIVACE（音ゲー）待望のアプリ化！</title><link>https://coalabo.net/p/vivace-asset-bundle/</link><pubDate>Thu, 19 Aug 2021 11:00:00 +2100</pubDate><guid>https://coalabo.net/p/vivace-asset-bundle/</guid><description>これは１年前のお話&amp;hellip; 学祭に向けて、昨年同級生と3人で音ゲーを作った話は過去に記事にしたと思います。
当日の朝4時まで Discord をつないでコーディングをし、学祭ギリギリでビルドして、エラーがないことも確認できました。
Discord の通話を切った後、悲劇は起こります 私: 「じゃぁもう4時半だし、PlayStore に APK ファイルをアップロードして、寝るか〜〜」
カチッ
カチッ
（ドラッグの音）
Google Play Store: 「エラー: APK ファイルのサイズを 100 MB まで小さくするか、APK 拡張ファイルを使用する必要があります。」
私: 「 ！！！！！！！！！」
そうです、この音ゲーアプリ、楽曲ファイルが原因で軽く100MBを超えちゃってるんです。
さすがに眠くて、Google Play Store でのリリースは諦めました。（当日は APK 配布）
今回は追加ダウンロード機能を実装して、アプリストアへのリリースまでやります！ 大体の音ゲーって、アプリサイズ縮小のために、起動後にコンテンツのダウンロードを行いますよね。
今回はそれを、AssetBundle と用意している API サーバを用いて実装していきます。
AssetBundle とは、アプリのビルド時に行っている処理を事前に行っておく事により、実行時に外部からアセットがロードできるようにしたものです。 これを Web サーバなどに置いておくことで、ダウンロードしてリソースを使用できるようになります。
AssetBundle の作成 今回は AssetBundleBrowser を使用します。これはプレリリース版ですので、使用は自己責任でお願いします。
AssetBundleBrowser (GitHub)　https://github.com/Unity-Technologies/AssetBundles-Browser
AssetBundleBrowser
使い方は簡単、このツールに AssetBundle にまとめたいものをドラッグします。 今回だと、音源とプレビュー用の音源、各難易度の譜面とアートワークをセットし、 Build タブに移動します。
AssetBundleBrowser (Build)</description></item><item><title>iPhoneXSのディスプレイを交換する</title><link>https://coalabo.net/p/iphone-display-replacement/</link><pubDate>Thu, 12 Aug 2021 00:00:00 +1900</pubDate><guid>https://coalabo.net/p/iphone-display-replacement/</guid><description>だってお風呂で音楽聴きたいもん&amp;hellip; こちらの iPhoneXS、毎日お風呂で使ってたんですが水没しちゃいました。
水没したiPhoneXS（クリックで再生）
iPhoneXS は 2018 年に発売され、IEC規格60529に基づくIP68等級に適合しているそうです。 どのくらいかというと、最大水深2メートルで最大30分間使用できるらしい。。
毎日お風呂で壁に立てかけて音楽を聴いてたんですが（風呂に携帯持ち込むなと、友人にめちゃめちゃ怒られました）、突然ディスプレイがちらつき始めたのです。
先ほどの映像から1時間後のiPhoneXS
ん、まだ息はある&amp;hellip;？ とりあえず iPhone を完全に放置し、内部が乾燥したであろう2日後に、おそるおそる Mac に接続。
すると、なんと反応があるではないですか！もしかして壊れていたのはディスプレイだけ&amp;hellip;？
とりあえず急いでバックアップをとり、密林に行って交換用ディスプレイを購入することにしました。
購入したもの　https://www.amazon.co.jp/gp/product/B08RYRPJGK/ref=ppx_yo_dt_b_asin_title_o06_s01
届きました！修理開始です 有機ELディスプレイ
ディスプレイが届きました！めちゃめちゃ綺麗な箱に入って届いて、若干テンションが上がりました(笑)
今回のキットにはドライバー3本とピンセット、ヘラ、吸盤、開口ツールなどの工具に加え、防水フレームステッカー（大切）とおまけのガラスフィルムもついてきました。 写真はは左から順に、星型ドライバー、十字型ドライバー、Y字型ドライバーです。
今回のキットの付属品
まずはおしりのネジ2つを外していきます。YouTube で分解動画などがよくありますが、皆さん簡単そうに回していますが一番ここが難しかったです。 少しでも力を抜くと、すぐにネジがなめてしまうので注意しましょう。
こちらは星型ネジです
あとは大体想像つくかと思いますが、ドライヤーでシールの粘着力を弱めていきます。 そして吸盤で引っ張り、隙間を作って開いていきます。
お風呂で使っていたため、湿気などで防水フレームのシールが朽ちているかなと思っていましたが、予想通りでした。 ゴムが水分で、画像のように粉々になっていました。（あとで綺麗に除去しておきました。） 交換用の防水フレームシールが入っていてよかったです！
本体正面から見て右側にケーブルがあるので、あまり深くヘラを差し込まないようにしましょう。
どんどん隙間を作って開いていきます
ようやくご対面です（一苦労） iPhoneXSの中身
ここから、まずバッテリーに接続されているケーブルを外し、その後ディスプレイにつながるケーブル3本を外します。
ケーブルが接続されているところにはカバーがついているのですが、ここをネジで外します。 驚いたのはネジの高さ（深さ？）で、1~2mm くらいしかありませんでした。 さすが Apple 製品、コンパクトな作りです。（紛失注意）
ケーブルカバー部
こちらがカバーを外した画像です。
ケーブルカバーを外した様子</description></item><item><title>学祭2020向け音ゲーの制作: VIVACE</title><link>https://coalabo.net/p/vivace/</link><pubDate>Mon, 12 Jul 2021 02:00:00 +2100</pubDate><guid>https://coalabo.net/p/vivace/</guid><description>学祭で何か展示したい！ その当時、新しいジャンルのものに挑戦したい！とずっと考えており、Unity に挑戦することにしました。
同級生のエンジニア 3名で作ったのですが、制作物は 3人とも大好きな「音ゲー」にしました。
こんな感じの音ゲーを制作しました（ネタバレ）↓
スプラッシュ画面 プレイ画面
タイトル決定 まず初めに考えたのは、仕様でもデザインでもなくタイトルでした。
タイトルは、「VIVACE」（ヴィヴァーチェ）です！ 速度記号で、「活発に」という意味があるそうです。
デザイン作成！ デザインを作成するのが一番好きかもしれません（おい）
最近はデザインを作成するだけで満足感を得ることができるようになりました。
デザイン作成
とりあえず、最低限遊べるコードを実装します 本来であればタッチで遊べる仕様ですが、とりあえずキーボードでノーツを叩けるようにします。
中央から順に、Perfect・Great・Good の3つの Box Collider を設置し、 ノーツ落下時の onTriggerEnter と onTriggerExit の2つで判定を検知します。
イメージ画像
Rider画面
スコアに関しては、共同開発したメンバーが区分求積法での加算を実装してくれました（天才）
ん&amp;hellip; 区分求積法ってなんだっけ？
これです！高校数学で習いましたね！（私は gg った）
区分求積法
ノーツの読み込み仕様を決定 とりあえず、CSV形式（カンマ区切り）で譜面を制作することにしました！
こんな感じ ↓
1.6901408450704225,1 1.6901408450704225,3 2.007042253521127,2 2.323943661971831,3 2.535211267605634,2 2.535211267605634,4 2.9577464788732395,2 2.9577464788732395,4 3.591549295774648,3 3.8028169014084505,2 4.014084507042254,1 4.225352112676056,0 ... ノーツタッチの時刻と、それに対応するレーン（0〜4）番号を保存しています。
また、これを生成するツールも Python で実装しました！</description></item><item><title>誰にとってもわかりやすいコミットメッセージ</title><link>https://coalabo.net/p/commit-message/</link><pubDate>Sat, 05 Jun 2021 22:00:00 +2100</pubDate><guid>https://coalabo.net/p/commit-message/</guid><description>みんなコミットメッセージってどんなふうに書いてるのかな？ ふと気になって、さまざまなオープンソースのコミットメッセージをみてきました。
今まで自分が使ってきたコミットメッセージがあまりにも一般的じゃなかったので、ここで統一したいと思います！（覚え書き）
これまでのコミットメッセージの付け方 はじめて共同プロジェクトを立ち上げた時に、とあるネット上の人のコミットメッセージの書き方を真似て、マイルールとしていました。
大かっこ[]の中に Prefix を入れ（例：add fix hotfix など）、その後に日本語でコミットメッセージを記入するという形でしたが、 あまりこの書き方をしている人が多くなかったのです&amp;hellip;
[add] リアルタイムデータベースとの通信機能 もっとも多かった印象がある &amp;amp; かっこよかったもの Add: リアルタイムデータベースとの通信機能 やっぱこういう Prefix のつけ方がかっこいいですよね。
あと当たり前ですが、英語でのコミットメッセージが多かったので、個人開発は英語、友人との共同開発は日本語という感じに分けてもいいですね。
Prefix で代表的なもの add・update・upgrade・fix・hotfix などはよく聞きますが、どういった Prefix が共通認識としてよく使われているのでしょうか。
また、update と upgrade など、違いがよくわからないものも多いので、使う場合のシチュエーションも同時に調べてみたいと思います。
Prefix 使うシチュエーション Add: 機能やファイルなどの追加 Improve: コードの改善・リファクタリング Change: 仕様変更 Update: 機能修正（バグではない） Upgrade: バージョンアップ Disable: 機能の無効化（コメントアウト等） Rename: ファイル名を変更する Remove: ファイルを削除する Move: ファイルを移動する Fix: バグ修正 Hotfix: クリティカルなバグ修正 Revert: 変更取り消し 調べてみた結果、update と upgrade は上記のように分けている人もいれば、update　がバージョンアップとしている人もいました。 また、improve の代わりに clean を使う人も多かったですが、こちらはシチュエーションは同じなので問題にはならなそうです。 change と update もほぼ同じ印象を受けました。</description></item><item><title>鯖管向け！Minecraftサーバーの監視ツールの制作</title><link>https://coalabo.net/p/minecraft-server-monitor/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +2100</pubDate><guid>https://coalabo.net/p/minecraft-server-monitor/</guid><description>今回の Firebase は一味違います 今回作成する監視サーバですが、Google Cloud Platform の Cloud Scheduler を使って、Firebase の Cloud Functions を定期実行させます。
Cloud Scheduler と Cloud Functions の連携方法ですが、 Google が用意してある firebase-functions というライブラリに付随しているスケジュール機能を使用することで、 自動で GCP の Cloud Scheduler に登録されます。
天下のGoogle様様 Firebase で定期実行って、かなり金銭的なコストがかかりそうですよね。
Web サーバーなどとは違い、時間指定のあるジョブ（ Worker ）になるので、 結構ホスティングサービスも少ないですし、今回作成する監視サーバーは10分毎に定期実行します。
ですが、Cloud Functions では月200万回までの呼び出しは無料です！！
具体的に、関数の呼び出しの課金は以下の通りです。
月間呼び出し回数 料金（100 万回あたり） 最初の 200 万回 無料 200 万回を超えた分 $0.40 今回は、かなり複雑なDBの整形ジョブやWebサービスのCRONジョブをするわけではないので、無料枠で十分です。
ただし気をつけないといけないのが、関数のデプロイには料金がかかります。
まず、関数は無料枠のない Container Registry に保存されるため、デプロイ後にわずかな料金が発生します。 Container Registry のストレージ費用は、1 GB あたり月額約 $0.</description></item><item><title>Hugo + GitHub Pages + 独自ドメイン でサイトを構築する</title><link>https://coalabo.net/p/hugo/</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0900</pubDate><guid>https://coalabo.net/p/hugo/</guid><description>ブログを始めてみたい！ ブログを始めたいと思ったきっかけは、自分が作ったサービスが終了してしまうことでした。
せっかく作ったものが消えて日の目を浴びなくなるのは勿体ないので、 ブログという形で供養してやります！
なんかかっこいい方法でホスティングしたい 第一として、運用費用があまりかからないようにする必要があります。 なので、Nuxt.js を使って静的サイトを書き出し、GitHub Pages にデプロイしようかと考えていました。
ただ、フロントエンドやデザインのお仕事が続いており、自分でフロントを作成するのもなんだかなぁという状態でした。
とその時、知り合いからHugoを布教されました。なんとHugoにはテンプレートがたくさんあるじゃないですか！
Hugoは触ったことがなかったので、勉強がてら（といっても使い方の知見を得るだけですが）これを使ってブログを作成することにしました。
書き出しめっちゃ速い！！ 記事を Markdown で書いていくのですが、保存するたびホットリロードでブラウザに反映してくれます。
その速度が明らかに速いのです！（私が React や Nuxt.js などに慣れているからかもしれませんが&amp;hellip;）
書き出し速度がやばい！
Terminal 上に表示されている再レンダリング時間は 9ms とでていますね。
もう、一目惚れしました。
GitHub Pages にデプロイしよう すいません、タイトル詐欺です。 デプロイする前に1つすることがありました。
今回 Hugo Theme Stackというテーマパックを編集して使ったのですが、 これを submodule 登録しておきます。
$ git submodule add https://github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack また、git から clone する時は、submodule も忘れず引っ張ってくるようにしましょう。
$ git clone --recurse-submodules --depth 1 git@github.com:smpny7/coalabo.git GitHub Actions で自動化しよう 今度こそ、GitHub Actions で GitHub Pages に自動デプロイするように設定していきます。
今回 GitHub Pages 用に、&amp;lt;GitHub ユーザー名&amp;gt;.</description></item><item><title>草bot (wbot) の開発談</title><link>https://coalabo.net/p/wbot/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0900</pubDate><guid>https://coalabo.net/p/wbot/</guid><description>察してください、ネタ回です Molly fantasy って実在したんですね。
今回は、友人十数名が入ったDiscordサーバーがあるのですが、 そのサーバー用の Bot を作った、という箸休め回です。
この Bot は、みんなが登録したキーワードを打つと対応した語録を発言してくれます。
なんか盛り上がって、つくることになった 草Botくん、「草」という文字が入っていると、「草」と返してくれることからこの名前がついたんです。
草Botくん
実はこの草Bot、今はおもちゃにされています。
もはやBotの表示名も変えられてますw
敗因: 誰でもプルリクOK＆自動デプロイ仕様にしてしまった 最初は「草」と返してくれる Bot だったのですが、サーバーメンバーがこの Bot にどんどん単語を登録していきました。 ただ、そのセンスがかなり良すぎるので、本来の目的が語録に変わって私も大満足です(笑)
せっかくなので、自分のお気に入り語録を紹介しましょう。
これ何だかわかりますか？
お気に入り語録 その1
↑ これをみてピンときた人はさすがですね ！
実はこれ
これですね！いつものやつです。
実は以前、みんなで Raspberry Pi OS をセットアップしてた時ですが、 日本語化がうまくいかず、文字化けで何も見えない現象が発生してしまいました。
唯一文字化けしていても意味がわかった文面が上の文字列で、
伏字にしているのに、隠せれてないwwww
という経緯で追加されました(笑)
もう一つのお気に入りはこれです。
「腹痛」に反応します
「腹痛」という単語を聞くと、よくわからない係数を測ってくれ、それに応じてアナウンスが流れます。
元ネタはこちら ニコニコ大百科（ドミネーター）
しかもこれは、例のよくわからない係数（乱数）に応じてメッセージが変わります。
今回の技術的なコト Node.js で作りましたが、Bot はすぐできるので記事にするほどでもないかと思います。
詳しくは以下のドキュメントをどうぞ！
Discord.js https://discord.</description></item><item><title>アプリ版 Minecraft サーバー制御ツールの制作</title><link>https://coalabo.net/p/jokura-app/</link><pubDate>Fri, 23 Apr 2021 09:19:41 +0900</pubDate><guid>https://coalabo.net/p/jokura-app/</guid><description>やっぱアプリ化、したいよね！！ Webベースのツールを作ると、そのアプリ版を作りたくなる、ここまでがテンプレですよね。
今回は、ストアにリリースが手軽な Android アプリを制作したいと思います。
Android Studio 使いやすい&amp;hellip; この時、プログラミングというものに触れてまだ半年もたっていませんでした。 なので初心者でも使いやすい Visual Studio Code を当時愛用していました。（今でも時々使っています）
しかし今回アプリ開発というのもあり、デバッグのしやすいエディタを使うことにしました。 まぁもちろん Android Studio 一択になるわけですが。 JetBrains 社が開発したソフトウェアを初めて触ったのですが、 これがまた使いやすいソフトウェアで感動したのを覚えています。 （私が JetBrains 信徒になる話はまたいつか）
Android Studio のデザイン画面
さぁ開発だ！ の前に、デザインを作っていきます。
スマホによってサイズが異なるので、対応できるデザインを意識して作成しました。
Adobe XD
コーディング すべしぬべし 今回の技術的な部分です。サーバーの様子を取得するのとリクエストを送る機能をつけます！（大したことはしてませんが）
スプラッシュ画面（情クラ！アプリ） ホーム（情クラ！アプリ）
まず、オンラインプレイヤーの取得部分です。 ホーム画面の上半分には、オンラインのメンバーが一覧でわかるようにしています。
今回、Minecraftの画像を取得するAPIを自作しました。 そこからAndroidに画像を取得するようにしています。 APIからの画像取得には、Picasso というライブラリを使用しました。
Picasso（公式サイト） https://square.github.io/picasso/
具体的には、以下のような書き方でさくっとインターネットから画像取得ができちゃうものです！
Picasso.get() .load(&amp;#34;https://jokura.net/api/getSkin?id=minecraft_id&amp;#34;) // 今回作成したAPI .into(face1); face1というのは ImageView の id で、APIから取得した画像を流し込んでくれます！
また、プレイヤーがオンラインかどうかは、用意したAPIから返ってきた情報を元に表示を切り替えます。 APIからのGET・POSTメソッドには、便利な OkHttp3 などの便利なライブラリがありますが、 この時は初心者だったこともあり、Java通信（HttpUrlConnection）で実装しました(笑)</description></item><item><title>Minecraftサーバーのリモート制御サイトを制作したお話（情クラ！）</title><link>https://coalabo.net/p/jokura-web/</link><pubDate>Thu, 22 Apr 2021 09:06:44 +0900</pubDate><guid>https://coalabo.net/p/jokura-web/</guid><description>Minecraft っていいよね Minecraft って、複数人でプレイすると沼ですよね。
「 情クラ！」という、知り合い十数名程度の Minecraft サーバーで遊んでいるのですが、 今や大陸内には高速道路が広がり、複数の大陸間には大きな橋が建築されています。（やばすぎ）
瀬戸大橋（こんなのが 5, 6本架かっています）
ある日、Minecraft のサーバー管理者になった 最初はみんなで家に集まって、ローカルでサーバーを建ててプレイしていました。 しかしプレイヤーがどんどん増えてきたため、Google Cloud Platform（GCP）でサーバーを立てることにしました。
これが、「情クラ！」という Minecraft サーバーの誕生のきっかけです。
いつどこでも Minecraft サーバーで遊べる環境が完成し、ワールドの発展度合いが加速度的に大きくなったのですが、 しかし1つ大きな問題がでてきました。
これは、Google Cloud Platform（GCP）がまだ365日無料トライアルだった頃の話なのですが、 当時GCPには、年間 30,000円分の無料クレジットが付属していました。 それをちょうど1年間で使い切るn1-standard-1 プラン（仮想 CPU 数: 1, メモリ: 3.75 GB）で運用していたのですが、 大人数が長時間プレイしていると動作がもっさりしてくるのです。
GCPの料金（N1 標準マシンタイプ）
サーバー管理者だった私は、連絡を受けるたび SSH 接続してサーバーを再起動していました。
ですがここは、ぜひ技術の力で課題解決をしよう！ということで、Minecraftサーバーを誰でも簡単に制御できる、Webアプリケーションを作成することになりました。
まずは完成品をどうぞ トップページ（情クラ！） サーバー状況確認ページ（情クラ！）
最初に実装したのは、「ホーム」のお知らせ（左）と「サーバー状況」の確認画面（右）です。 モバイルファーストのデザインですが、きちんとレスポンシブ対応させています。
以下、それぞれの軽い機能紹介です。
ページ 機能 ホーム プレイヤーが自由に建築報告を投稿することができます サーバー状況 サーバーの起動・停止状況やオンラインメンバーを確認できます ここで、少し技術的な話をしましょう 一応そういうブログ（ ？）なので、今回 Minecraft サーバーと連携したノウハウについて記述しておきます。</description></item></channel></rss>